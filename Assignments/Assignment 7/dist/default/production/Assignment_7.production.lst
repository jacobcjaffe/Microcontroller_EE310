

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Tue Apr 08 12:25:35 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	18F47K42
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,space=0,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     7                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1,group=1
    13                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1,group=1
    14                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1,group=1
    16                           	psect	smallconst,global,reloc=2,class=SMALLCONST,space=0,delta=1,noexec
    17                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    18                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    20   000000                     
    21                           ; Generated 12/10/2023 GMT
    22                           ; 
    23                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution. Publication is not required when
    37                           ;        this file is used in an embedded application.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC18F47K42 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55   003FE0                     bsr             equ	16352
    56   003FE9                     fsr0            equ	16361
    57   003FEA                     fsr0h           equ	16362
    58   003FE9                     fsr0l           equ	16361
    59   003FE1                     fsr1            equ	16353
    60   003FE2                     fsr1h           equ	16354
    61   003FE1                     fsr1l           equ	16353
    62   003FD9                     fsr2            equ	16345
    63   003FDA                     fsr2h           equ	16346
    64   003FD9                     fsr2l           equ	16345
    65   003FEF                     indf0           equ	16367
    66   003FE7                     indf1           equ	16359
    67   003FDF                     indf2           equ	16351
    68   003FD2                     intcon          equ	16338
    69   0039E5                     nvmcon          equ	14821
    70   003FF9                     pcl             equ	16377
    71   003FFA                     pclath          equ	16378
    72   003FFB                     pclatu          equ	16379
    73   003FEB                     plusw0          equ	16363
    74   003FE3                     plusw1          equ	16355
    75   003FDB                     plusw2          equ	16347
    76   003FED                     postdec0        equ	16365
    77   003FE5                     postdec1        equ	16357
    78   003FDD                     postdec2        equ	16349
    79   003FEE                     postinc0        equ	16366
    80   003FE6                     postinc1        equ	16358
    81   003FDE                     postinc2        equ	16350
    82   003FEC                     preinc0         equ	16364
    83   003FE4                     preinc1         equ	16356
    84   003FDC                     preinc2         equ	16348
    85   003FF3                     prod            equ	16371
    86   003FF4                     prodh           equ	16372
    87   003FF3                     prodl           equ	16371
    88   003FD8                     status          equ	16344
    89   003FF5                     tablat          equ	16373
    90   003FF6                     tblptr          equ	16374
    91   003FF7                     tblptrh         equ	16375
    92   003FF6                     tblptrl         equ	16374
    93   003FF8                     tblptru         equ	16376
    94   003FFD                     tosl            equ	16381
    95   003FE8                     wreg            equ	16360
    96   003880                     STATUS_CSHAD    equ	14464	;# 
    97   003881                     WREG_CSHAD      equ	14465	;# 
    98   003882                     BSR_CSHAD       equ	14466	;# 
    99   003883                     SHADCON         equ	14467	;# 
   100   003884                     STATUS_SHAD     equ	14468	;# 
   101   003885                     WREG_SHAD       equ	14469	;# 
   102   003886                     BSR_SHAD        equ	14470	;# 
   103   003887                     PCLATH_SHAD     equ	14471	;# 
   104   003888                     PCLATU_SHAD     equ	14472	;# 
   105   003889                     FSR0SH          equ	14473	;# 
   106   003889                     FSR0L_SHAD      equ	14473	;# 
   107   00388A                     FSR0H_SHAD      equ	14474	;# 
   108   00388B                     FSR1SH          equ	14475	;# 
   109   00388B                     FSR1L_SHAD      equ	14475	;# 
   110   00388C                     FSR1H_SHAD      equ	14476	;# 
   111   00388D                     FSR2SH          equ	14477	;# 
   112   00388D                     FSR2L_SHAD      equ	14477	;# 
   113   00388E                     FSR2H_SHAD      equ	14478	;# 
   114   00388F                     PRODSH          equ	14479	;# 
   115   00388F                     PRODL_SHAD      equ	14479	;# 
   116   003890                     PRODH_SHAD      equ	14480	;# 
   117   00389D                     IVTADL          equ	14493	;# 
   118   00389E                     IVTADH          equ	14494	;# 
   119   00389F                     IVTADU          equ	14495	;# 
   120   00395B                     WDTCON0         equ	14683	;# 
   121   00395C                     WDTCON1         equ	14684	;# 
   122   00395D                     WDTPSL          equ	14685	;# 
   123   00395E                     WDTPSH          equ	14686	;# 
   124   00395F                     WDTTMR          equ	14687	;# 
   125   003960                     CRCDATA         equ	14688	;# 
   126   003960                     CRCDATL         equ	14688	;# 
   127   003961                     CRCDATH         equ	14689	;# 
   128   003962                     CRCACC          equ	14690	;# 
   129   003962                     CRCACCL         equ	14690	;# 
   130   003963                     CRCACCH         equ	14691	;# 
   131   003964                     CRCSHFT         equ	14692	;# 
   132   003964                     CRCSHIFTL       equ	14692	;# 
   133   003965                     CRCSHIFTH       equ	14693	;# 
   134   003966                     CRCXOR          equ	14694	;# 
   135   003966                     CRCXORL         equ	14694	;# 
   136   003967                     CRCXORH         equ	14695	;# 
   137   003968                     CRCCON0         equ	14696	;# 
   138   003969                     CRCCON1         equ	14697	;# 
   139   003976                     SCANLADR        equ	14710	;# 
   140   003976                     SCANLADRL       equ	14710	;# 
   141   003977                     SCANLADRH       equ	14711	;# 
   142   003978                     SCANLADRU       equ	14712	;# 
   143   003979                     SCANHADR        equ	14713	;# 
   144   003979                     SCANHADRL       equ	14713	;# 
   145   00397A                     SCANHADRH       equ	14714	;# 
   146   00397B                     SCANHADRU       equ	14715	;# 
   147   00397C                     SCANCON0        equ	14716	;# 
   148   00397D                     SCANTRIG        equ	14717	;# 
   149   003980                     IPR0            equ	14720	;# 
   150   003981                     IPR1            equ	14721	;# 
   151   003982                     IPR2            equ	14722	;# 
   152   003983                     IPR3            equ	14723	;# 
   153   003984                     IPR4            equ	14724	;# 
   154   003985                     IPR5            equ	14725	;# 
   155   003986                     IPR6            equ	14726	;# 
   156   003987                     IPR7            equ	14727	;# 
   157   003988                     IPR8            equ	14728	;# 
   158   003989                     IPR9            equ	14729	;# 
   159   00398A                     IPR10           equ	14730	;# 
   160   003990                     PIE0            equ	14736	;# 
   161   003991                     PIE1            equ	14737	;# 
   162   003992                     PIE2            equ	14738	;# 
   163   003993                     PIE3            equ	14739	;# 
   164   003994                     PIE4            equ	14740	;# 
   165   003995                     PIE5            equ	14741	;# 
   166   003996                     PIE6            equ	14742	;# 
   167   003997                     PIE7            equ	14743	;# 
   168   003998                     PIE8            equ	14744	;# 
   169   003999                     PIE9            equ	14745	;# 
   170   00399A                     PIE10           equ	14746	;# 
   171   0039A0                     PIR0            equ	14752	;# 
   172   0039A1                     PIR1            equ	14753	;# 
   173   0039A2                     PIR2            equ	14754	;# 
   174   0039A3                     PIR3            equ	14755	;# 
   175   0039A4                     PIR4            equ	14756	;# 
   176   0039A5                     PIR5            equ	14757	;# 
   177   0039A6                     PIR6            equ	14758	;# 
   178   0039A7                     PIR7            equ	14759	;# 
   179   0039A8                     PIR8            equ	14760	;# 
   180   0039A9                     PIR9            equ	14761	;# 
   181   0039AA                     PIR10           equ	14762	;# 
   182   0039C0                     PMD0            equ	14784	;# 
   183   0039C1                     PMD1            equ	14785	;# 
   184   0039C2                     PMD2            equ	14786	;# 
   185   0039C3                     PMD3            equ	14787	;# 
   186   0039C4                     PMD4            equ	14788	;# 
   187   0039C5                     PMD5            equ	14789	;# 
   188   0039C6                     PMD6            equ	14790	;# 
   189   0039C7                     PMD7            equ	14791	;# 
   190   0039D0                     BORCON          equ	14800	;# 
   191   0039D1                     VREGCON         equ	14801	;# 
   192   0039D8                     CPUDOZE         equ	14808	;# 
   193   0039D9                     OSCCON1         equ	14809	;# 
   194   0039DA                     OSCCON2         equ	14810	;# 
   195   0039DB                     OSCCON3         equ	14811	;# 
   196   0039DC                     OSCSTAT         equ	14812	;# 
   197   0039DC                     OSCSTAT1        equ	14812	;# 
   198   0039DD                     OSCEN           equ	14813	;# 
   199   0039DE                     OSCTUNE         equ	14814	;# 
   200   0039DF                     OSCFRQ          equ	14815	;# 
   201   0039E0                     NVMADRL         equ	14816	;# 
   202   0039E1                     NVMADRH         equ	14817	;# 
   203   0039E3                     NVMDAT          equ	14819	;# 
   204   0039E5                     NVMCON1         equ	14821	;# 
   205   0039E6                     NVMCON2         equ	14822	;# 
   206   0039EF                     PRLOCK          equ	14831	;# 
   207   0039F1                     ISRPR           equ	14833	;# 
   208   0039F2                     MAINPR          equ	14834	;# 
   209   0039F3                     DMA1PR          equ	14835	;# 
   210   0039F4                     DMA2PR          equ	14836	;# 
   211   0039F7                     SCANPR          equ	14839	;# 
   212   003A00                     RA0PPS          equ	14848	;# 
   213   003A01                     RA1PPS          equ	14849	;# 
   214   003A02                     RA2PPS          equ	14850	;# 
   215   003A03                     RA3PPS          equ	14851	;# 
   216   003A04                     RA4PPS          equ	14852	;# 
   217   003A05                     RA5PPS          equ	14853	;# 
   218   003A06                     RA6PPS          equ	14854	;# 
   219   003A07                     RA7PPS          equ	14855	;# 
   220   003A08                     RB0PPS          equ	14856	;# 
   221   003A09                     RB1PPS          equ	14857	;# 
   222   003A0A                     RB2PPS          equ	14858	;# 
   223   003A0B                     RB3PPS          equ	14859	;# 
   224   003A0C                     RB4PPS          equ	14860	;# 
   225   003A0D                     RB5PPS          equ	14861	;# 
   226   003A0E                     RB6PPS          equ	14862	;# 
   227   003A0F                     RB7PPS          equ	14863	;# 
   228   003A10                     RC0PPS          equ	14864	;# 
   229   003A11                     RC1PPS          equ	14865	;# 
   230   003A12                     RC2PPS          equ	14866	;# 
   231   003A13                     RC3PPS          equ	14867	;# 
   232   003A14                     RC4PPS          equ	14868	;# 
   233   003A15                     RC5PPS          equ	14869	;# 
   234   003A16                     RC6PPS          equ	14870	;# 
   235   003A17                     RC7PPS          equ	14871	;# 
   236   003A18                     RD0PPS          equ	14872	;# 
   237   003A19                     RD1PPS          equ	14873	;# 
   238   003A1A                     RD2PPS          equ	14874	;# 
   239   003A1B                     RD3PPS          equ	14875	;# 
   240   003A1C                     RD4PPS          equ	14876	;# 
   241   003A1D                     RD5PPS          equ	14877	;# 
   242   003A1E                     RD6PPS          equ	14878	;# 
   243   003A1F                     RD7PPS          equ	14879	;# 
   244   003A20                     RE0PPS          equ	14880	;# 
   245   003A21                     RE1PPS          equ	14881	;# 
   246   003A22                     RE2PPS          equ	14882	;# 
   247   003A40                     ANSELA          equ	14912	;# 
   248   003A41                     WPUA            equ	14913	;# 
   249   003A42                     ODCONA          equ	14914	;# 
   250   003A43                     SLRCONA         equ	14915	;# 
   251   003A44                     INLVLA          equ	14916	;# 
   252   003A45                     IOCAP           equ	14917	;# 
   253   003A46                     IOCAN           equ	14918	;# 
   254   003A47                     IOCAF           equ	14919	;# 
   255   003A50                     ANSELB          equ	14928	;# 
   256   003A51                     WPUB            equ	14929	;# 
   257   003A52                     ODCONB          equ	14930	;# 
   258   003A53                     SLRCONB         equ	14931	;# 
   259   003A54                     INLVLB          equ	14932	;# 
   260   003A55                     IOCBP           equ	14933	;# 
   261   003A56                     IOCBN           equ	14934	;# 
   262   003A57                     IOCBF           equ	14935	;# 
   263   003A5A                     RB1I2C          equ	14938	;# 
   264   003A5B                     RB2I2C          equ	14939	;# 
   265   003A60                     ANSELC          equ	14944	;# 
   266   003A61                     WPUC            equ	14945	;# 
   267   003A62                     ODCONC          equ	14946	;# 
   268   003A63                     SLRCONC         equ	14947	;# 
   269   003A64                     INLVLC          equ	14948	;# 
   270   003A65                     IOCCP           equ	14949	;# 
   271   003A66                     IOCCN           equ	14950	;# 
   272   003A67                     IOCCF           equ	14951	;# 
   273   003A6A                     RC3I2C          equ	14954	;# 
   274   003A6B                     RC4I2C          equ	14955	;# 
   275   003A70                     ANSELD          equ	14960	;# 
   276   003A71                     WPUD            equ	14961	;# 
   277   003A72                     ODCOND          equ	14962	;# 
   278   003A73                     SLRCOND         equ	14963	;# 
   279   003A74                     INLVLD          equ	14964	;# 
   280   003A7A                     RD0I2C          equ	14970	;# 
   281   003A7B                     RD1I2C          equ	14971	;# 
   282   003A80                     ANSELE          equ	14976	;# 
   283   003A81                     WPUE            equ	14977	;# 
   284   003A82                     ODCONE          equ	14978	;# 
   285   003A83                     SLRCONE         equ	14979	;# 
   286   003A84                     INLVLE          equ	14980	;# 
   287   003A85                     IOCEP           equ	14981	;# 
   288   003A86                     IOCEN           equ	14982	;# 
   289   003A87                     IOCEF           equ	14983	;# 
   290   003ABF                     PPSLOCK         equ	15039	;# 
   291   003AC0                     INT0PPS         equ	15040	;# 
   292   003AC1                     INT1PPS         equ	15041	;# 
   293   003AC2                     INT2PPS         equ	15042	;# 
   294   003AC3                     T0CKIPPS        equ	15043	;# 
   295   003AC4                     T1CKIPPS        equ	15044	;# 
   296   003AC5                     T1GPPS          equ	15045	;# 
   297   003AC6                     T3CKIPPS        equ	15046	;# 
   298   003AC7                     T3GPPS          equ	15047	;# 
   299   003AC8                     T5CKIPPS        equ	15048	;# 
   300   003AC9                     T5GPPS          equ	15049	;# 
   301   003ACA                     T2INPPS         equ	15050	;# 
   302   003ACB                     T4INPPS         equ	15051	;# 
   303   003ACC                     T6INPPS         equ	15052	;# 
   304   003ACD                     CCP1PPS         equ	15053	;# 
   305   003ACE                     CCP2PPS         equ	15054	;# 
   306   003ACF                     CCP3PPS         equ	15055	;# 
   307   003AD0                     CCP4PPS         equ	15056	;# 
   308   003AD1                     SMT1WINPPS      equ	15057	;# 
   309   003AD2                     SMT1SIGPPS      equ	15058	;# 
   310   003AD3                     CWG1INPPS       equ	15059	;# 
   311   003AD4                     CWG2INPPS       equ	15060	;# 
   312   003AD5                     CWG3INPPS       equ	15061	;# 
   313   003AD6                     MD1CARLPPS      equ	15062	;# 
   314   003AD7                     MD1CARHPPS      equ	15063	;# 
   315   003AD8                     MD1SRCPPS       equ	15064	;# 
   316   003AD9                     CLCIN0PPS       equ	15065	;# 
   317   003ADA                     CLCIN1PPS       equ	15066	;# 
   318   003ADB                     CLCIN2PPS       equ	15067	;# 
   319   003ADC                     CLCIN3PPS       equ	15068	;# 
   320   003ADD                     ADACTPPS        equ	15069	;# 
   321   003ADE                     SPI1SCKPPS      equ	15070	;# 
   322   003ADF                     SPI1SDIPPS      equ	15071	;# 
   323   003AE0                     SPI1SSPPS       equ	15072	;# 
   324   003AE1                     I2C1SCLPPS      equ	15073	;# 
   325   003AE2                     I2C1SDAPPS      equ	15074	;# 
   326   003AE3                     I2C2SCLPPS      equ	15075	;# 
   327   003AE4                     I2C2SDAPPS      equ	15076	;# 
   328   003AE5                     U1RXPPS         equ	15077	;# 
   329   003AE6                     U1CTSPPS        equ	15078	;# 
   330   003AE8                     U2RXPPS         equ	15080	;# 
   331   003AE9                     U2CTSPPS        equ	15081	;# 
   332   003BC9                     DMA2BUF         equ	15305	;# 
   333   003BCA                     DMA2DCNT        equ	15306	;# 
   334   003BCA                     DMA2DCNTL       equ	15306	;# 
   335   003BCB                     DMA2DCNTH       equ	15307	;# 
   336   003BCC                     DMA2DPTR        equ	15308	;# 
   337   003BCC                     DMA2DPTRL       equ	15308	;# 
   338   003BCD                     DMA2DPTRH       equ	15309	;# 
   339   003BCE                     DMA2DSZ         equ	15310	;# 
   340   003BCE                     DMA2DSZL        equ	15310	;# 
   341   003BCF                     DMA2DSZH        equ	15311	;# 
   342   003BD0                     DMA2DSA         equ	15312	;# 
   343   003BD0                     DMA2DSAL        equ	15312	;# 
   344   003BD1                     DMA2DSAH        equ	15313	;# 
   345   003BD2                     DMA2SCNT        equ	15314	;# 
   346   003BD2                     DMA2SCNTL       equ	15314	;# 
   347   003BD3                     DMA2SCNTH       equ	15315	;# 
   348   003BD4                     DMA2SPTR        equ	15316	;# 
   349   003BD4                     DMA2SPTRL       equ	15316	;# 
   350   003BD5                     DMA2SPTRH       equ	15317	;# 
   351   003BD6                     DMA2SPTRU       equ	15318	;# 
   352   003BD7                     DMA2SSZ         equ	15319	;# 
   353   003BD7                     DMA2SSZL        equ	15319	;# 
   354   003BD8                     DMA2SSZH        equ	15320	;# 
   355   003BD9                     DMA2SSA         equ	15321	;# 
   356   003BD9                     DMA2SSAL        equ	15321	;# 
   357   003BDA                     DMA2SSAH        equ	15322	;# 
   358   003BDB                     DMA2SSAU        equ	15323	;# 
   359   003BDC                     DMA2CON0        equ	15324	;# 
   360   003BDD                     DMA2CON1        equ	15325	;# 
   361   003BDE                     DMA2AIRQ        equ	15326	;# 
   362   003BDF                     DMA2SIRQ        equ	15327	;# 
   363   003BE9                     DMA1BUF         equ	15337	;# 
   364   003BEA                     DMA1DCNT        equ	15338	;# 
   365   003BEA                     DMA1DCNTL       equ	15338	;# 
   366   003BEB                     DMA1DCNTH       equ	15339	;# 
   367   003BEC                     DMA1DPTR        equ	15340	;# 
   368   003BEC                     DMA1DPTRL       equ	15340	;# 
   369   003BED                     DMA1DPTRH       equ	15341	;# 
   370   003BEE                     DMA1DSZ         equ	15342	;# 
   371   003BEE                     DMA1DSZL        equ	15342	;# 
   372   003BEF                     DMA1DSZH        equ	15343	;# 
   373   003BF0                     DMA1DSA         equ	15344	;# 
   374   003BF0                     DMA1DSAL        equ	15344	;# 
   375   003BF1                     DMA1DSAH        equ	15345	;# 
   376   003BF2                     DMA1SCNT        equ	15346	;# 
   377   003BF2                     DMA1SCNTL       equ	15346	;# 
   378   003BF3                     DMA1SCNTH       equ	15347	;# 
   379   003BF4                     DMA1SPTR        equ	15348	;# 
   380   003BF4                     DMA1SPTRL       equ	15348	;# 
   381   003BF5                     DMA1SPTRH       equ	15349	;# 
   382   003BF6                     DMA1SPTRU       equ	15350	;# 
   383   003BF7                     DMA1SSZ         equ	15351	;# 
   384   003BF7                     DMA1SSZL        equ	15351	;# 
   385   003BF8                     DMA1SSZH        equ	15352	;# 
   386   003BF9                     DMA1SSA         equ	15353	;# 
   387   003BF9                     DMA1SSAL        equ	15353	;# 
   388   003BFA                     DMA1SSAH        equ	15354	;# 
   389   003BFB                     DMA1SSAU        equ	15355	;# 
   390   003BFC                     DMA1CON0        equ	15356	;# 
   391   003BFD                     DMA1CON1        equ	15357	;# 
   392   003BFE                     DMA1AIRQ        equ	15358	;# 
   393   003BFF                     DMA1SIRQ        equ	15359	;# 
   394   003C56                     CLC4CON         equ	15446	;# 
   395   003C57                     CLC4POL         equ	15447	;# 
   396   003C58                     CLC4SEL0        equ	15448	;# 
   397   003C59                     CLC4SEL1        equ	15449	;# 
   398   003C5A                     CLC4SEL2        equ	15450	;# 
   399   003C5B                     CLC4SEL3        equ	15451	;# 
   400   003C5C                     CLC4GLS0        equ	15452	;# 
   401   003C5D                     CLC4GLS1        equ	15453	;# 
   402   003C5E                     CLC4GLS2        equ	15454	;# 
   403   003C5F                     CLC4GLS3        equ	15455	;# 
   404   003C60                     CLC3CON         equ	15456	;# 
   405   003C61                     CLC3POL         equ	15457	;# 
   406   003C62                     CLC3SEL0        equ	15458	;# 
   407   003C63                     CLC3SEL1        equ	15459	;# 
   408   003C64                     CLC3SEL2        equ	15460	;# 
   409   003C65                     CLC3SEL3        equ	15461	;# 
   410   003C66                     CLC3GLS0        equ	15462	;# 
   411   003C67                     CLC3GLS1        equ	15463	;# 
   412   003C68                     CLC3GLS2        equ	15464	;# 
   413   003C69                     CLC3GLS3        equ	15465	;# 
   414   003C6A                     CLC2CON         equ	15466	;# 
   415   003C6B                     CLC2POL         equ	15467	;# 
   416   003C6C                     CLC2SEL0        equ	15468	;# 
   417   003C6D                     CLC2SEL1        equ	15469	;# 
   418   003C6E                     CLC2SEL2        equ	15470	;# 
   419   003C6F                     CLC2SEL3        equ	15471	;# 
   420   003C70                     CLC2GLS0        equ	15472	;# 
   421   003C71                     CLC2GLS1        equ	15473	;# 
   422   003C72                     CLC2GLS2        equ	15474	;# 
   423   003C73                     CLC2GLS3        equ	15475	;# 
   424   003C74                     CLC1CON         equ	15476	;# 
   425   003C75                     CLC1POL         equ	15477	;# 
   426   003C76                     CLC1SEL0        equ	15478	;# 
   427   003C77                     CLC1SEL1        equ	15479	;# 
   428   003C78                     CLC1SEL2        equ	15480	;# 
   429   003C79                     CLC1SEL3        equ	15481	;# 
   430   003C7A                     CLC1GLS0        equ	15482	;# 
   431   003C7B                     CLC1GLS1        equ	15483	;# 
   432   003C7C                     CLC1GLS2        equ	15484	;# 
   433   003C7D                     CLC1GLS3        equ	15485	;# 
   434   003C7E                     CLCDATA0        equ	15486	;# 
   435   003CE5                     CLKRCON         equ	15589	;# 
   436   003CE6                     CLKRCLK         equ	15590	;# 
   437   003CFA                     MD1CON0         equ	15610	;# 
   438   003CFB                     MD1CON1         equ	15611	;# 
   439   003CFC                     MD1SRC          equ	15612	;# 
   440   003CFD                     MD1CARL         equ	15613	;# 
   441   003CFE                     MD1CARH         equ	15614	;# 
   442   003D10                     SPI1RXB         equ	15632	;# 
   443   003D11                     SPI1TXB         equ	15633	;# 
   444   003D12                     SPI1TCNT        equ	15634	;# 
   445   003D12                     SPI1TCNTL       equ	15634	;# 
   446   003D13                     SPI1TCNTH       equ	15635	;# 
   447   003D14                     SPI1CON0        equ	15636	;# 
   448   003D15                     SPI1CON1        equ	15637	;# 
   449   003D16                     SPI1CON2        equ	15638	;# 
   450   003D17                     SPI1STATUS      equ	15639	;# 
   451   003D18                     SPI1TWIDTH      equ	15640	;# 
   452   003D19                     SPI1BAUD        equ	15641	;# 
   453   003D1A                     SPI1INTF        equ	15642	;# 
   454   003D1B                     SPI1INTE        equ	15643	;# 
   455   003D1C                     SPI1CLK         equ	15644	;# 
   456   003D54                     I2C2RXB         equ	15700	;# 
   457   003D55                     I2C2TXB         equ	15701	;# 
   458   003D56                     I2C2CNT         equ	15702	;# 
   459   003D57                     I2C2ADB0        equ	15703	;# 
   460   003D58                     I2C2ADB1        equ	15704	;# 
   461   003D59                     I2C2ADR0        equ	15705	;# 
   462   003D5A                     I2C2ADR1        equ	15706	;# 
   463   003D5B                     I2C2ADR2        equ	15707	;# 
   464   003D5C                     I2C2ADR3        equ	15708	;# 
   465   003D5D                     I2C2CON0        equ	15709	;# 
   466   003D5E                     I2C2CON1        equ	15710	;# 
   467   003D5F                     I2C2CON2        equ	15711	;# 
   468   003D60                     I2C2ERR         equ	15712	;# 
   469   003D61                     I2C2STAT0       equ	15713	;# 
   470   003D62                     I2C2STAT1       equ	15714	;# 
   471   003D63                     I2C2PIR         equ	15715	;# 
   472   003D64                     I2C2PIE         equ	15716	;# 
   473   003D65                     I2C2CLK         equ	15717	;# 
   474   003D66                     I2C2BTO         equ	15718	;# 
   475   003D6A                     I2C1RXB         equ	15722	;# 
   476   003D6B                     I2C1TXB         equ	15723	;# 
   477   003D6C                     I2C1CNT         equ	15724	;# 
   478   003D6D                     I2C1ADB0        equ	15725	;# 
   479   003D6E                     I2C1ADB1        equ	15726	;# 
   480   003D6F                     I2C1ADR0        equ	15727	;# 
   481   003D70                     I2C1ADR1        equ	15728	;# 
   482   003D71                     I2C1ADR2        equ	15729	;# 
   483   003D72                     I2C1ADR3        equ	15730	;# 
   484   003D73                     I2C1CON0        equ	15731	;# 
   485   003D74                     I2C1CON1        equ	15732	;# 
   486   003D75                     I2C1CON2        equ	15733	;# 
   487   003D76                     I2C1ERR         equ	15734	;# 
   488   003D77                     I2C1STAT0       equ	15735	;# 
   489   003D78                     I2C1STAT1       equ	15736	;# 
   490   003D79                     I2C1PIR         equ	15737	;# 
   491   003D7A                     I2C1PIE         equ	15738	;# 
   492   003D7B                     I2C1CLK         equ	15739	;# 
   493   003D7C                     I2C1BTO         equ	15740	;# 
   494   003DD0                     U2RXB           equ	15824	;# 
   495   003DD0                     U2RXBL          equ	15824	;# 
   496   003DD2                     U2TXB           equ	15826	;# 
   497   003DD2                     U2TXBL          equ	15826	;# 
   498   003DD4                     U2P1            equ	15828	;# 
   499   003DD4                     U2P1L           equ	15828	;# 
   500   003DD6                     U2P2            equ	15830	;# 
   501   003DD6                     U2P2L           equ	15830	;# 
   502   003DD8                     U2P3            equ	15832	;# 
   503   003DD8                     U2P3L           equ	15832	;# 
   504   003DDA                     U2CON0          equ	15834	;# 
   505   003DDB                     U2CON1          equ	15835	;# 
   506   003DDC                     U2CON2          equ	15836	;# 
   507   003DDD                     U2BRG           equ	15837	;# 
   508   003DDD                     U2BRGL          equ	15837	;# 
   509   003DDE                     U2BRGH          equ	15838	;# 
   510   003DDF                     U2FIFO          equ	15839	;# 
   511   003DE0                     U2UIR           equ	15840	;# 
   512   003DE1                     U2ERRIR         equ	15841	;# 
   513   003DE2                     U2ERRIE         equ	15842	;# 
   514   003DE8                     U1RXB           equ	15848	;# 
   515   003DE8                     U1RXBL          equ	15848	;# 
   516   003DE9                     U1RXCHK         equ	15849	;# 
   517   003DEA                     U1TXB           equ	15850	;# 
   518   003DEA                     U1TXBL          equ	15850	;# 
   519   003DEB                     U1TXCHK         equ	15851	;# 
   520   003DEC                     U1P1            equ	15852	;# 
   521   003DEC                     U1P1L           equ	15852	;# 
   522   003DED                     U1P1H           equ	15853	;# 
   523   003DEE                     U1P2            equ	15854	;# 
   524   003DEE                     U1P2L           equ	15854	;# 
   525   003DEF                     U1P2H           equ	15855	;# 
   526   003DF0                     U1P3            equ	15856	;# 
   527   003DF0                     U1P3L           equ	15856	;# 
   528   003DF1                     U1P3H           equ	15857	;# 
   529   003DF2                     U1CON0          equ	15858	;# 
   530   003DF3                     U1CON1          equ	15859	;# 
   531   003DF4                     U1CON2          equ	15860	;# 
   532   003DF5                     U1BRG           equ	15861	;# 
   533   003DF5                     U1BRGL          equ	15861	;# 
   534   003DF6                     U1BRGH          equ	15862	;# 
   535   003DF7                     U1FIFO          equ	15863	;# 
   536   003DF8                     U1UIR           equ	15864	;# 
   537   003DF9                     U1ERRIR         equ	15865	;# 
   538   003DFA                     U1ERRIE         equ	15866	;# 
   539   003E9C                     DAC1CON1        equ	16028	;# 
   540   003E9E                     DAC1CON0        equ	16030	;# 
   541   003EB8                     CM2CON0         equ	16056	;# 
   542   003EB9                     CM2CON1         equ	16057	;# 
   543   003EBA                     CM2NCH          equ	16058	;# 
   544   003EBB                     CM2PCH          equ	16059	;# 
   545   003EBC                     CM1CON0         equ	16060	;# 
   546   003EBD                     CM1CON1         equ	16061	;# 
   547   003EBE                     CM1NCH          equ	16062	;# 
   548   003EBF                     CM1PCH          equ	16063	;# 
   549   003EC0                     CMOUT           equ	16064	;# 
   550   003EC1                     FVRCON          equ	16065	;# 
   551   003EC3                     ZCDCON          equ	16067	;# 
   552   003EC9                     HLVDCON0        equ	16073	;# 
   553   003ECA                     HLVDCON1        equ	16074	;# 
   554   003ED7                     ADCP            equ	16087	;# 
   555   003EDE                     ADLTH           equ	16094	;# 
   556   003EDE                     ADLTHL          equ	16094	;# 
   557   003EDF                     ADLTHH          equ	16095	;# 
   558   003EE0                     ADUTH           equ	16096	;# 
   559   003EE0                     ADUTHL          equ	16096	;# 
   560   003EE1                     ADUTHH          equ	16097	;# 
   561   003EE2                     ADERR           equ	16098	;# 
   562   003EE2                     ADERRL          equ	16098	;# 
   563   003EE3                     ADERRH          equ	16099	;# 
   564   003EE4                     ADSTPT          equ	16100	;# 
   565   003EE4                     ADSTPTL         equ	16100	;# 
   566   003EE5                     ADSTPTH         equ	16101	;# 
   567   003EE6                     ADFLTR          equ	16102	;# 
   568   003EE6                     ADFLTRL         equ	16102	;# 
   569   003EE7                     ADFLTRH         equ	16103	;# 
   570   003EE8                     ADACC           equ	16104	;# 
   571   003EE8                     ADACCL          equ	16104	;# 
   572   003EE9                     ADACCH          equ	16105	;# 
   573   003EEA                     ADACCU          equ	16106	;# 
   574   003EEB                     ADCNT           equ	16107	;# 
   575   003EEC                     ADRPT           equ	16108	;# 
   576   003EED                     ADPREV          equ	16109	;# 
   577   003EED                     ADPREVL         equ	16109	;# 
   578   003EEE                     ADPREVH         equ	16110	;# 
   579   003EEF                     ADRES           equ	16111	;# 
   580   003EEF                     ADRESL          equ	16111	;# 
   581   003EF0                     ADRESH          equ	16112	;# 
   582   003EF1                     ADPCH           equ	16113	;# 
   583   003EF3                     ADACQ           equ	16115	;# 
   584   003EF3                     ADACQL          equ	16115	;# 
   585   003EF4                     ADACQH          equ	16116	;# 
   586   003EF5                     ADCAP           equ	16117	;# 
   587   003EF6                     ADPRE           equ	16118	;# 
   588   003EF6                     ADPREL          equ	16118	;# 
   589   003EF7                     ADPREH          equ	16119	;# 
   590   003EF8                     ADCON0          equ	16120	;# 
   591   003EF9                     ADCON1          equ	16121	;# 
   592   003EFA                     ADCON2          equ	16122	;# 
   593   003EFB                     ADCON3          equ	16123	;# 
   594   003EFC                     ADSTAT          equ	16124	;# 
   595   003EFD                     ADREF           equ	16125	;# 
   596   003EFE                     ADACT           equ	16126	;# 
   597   003EFF                     ADCLK           equ	16127	;# 
   598   003F12                     SMT1TMR         equ	16146	;# 
   599   003F12                     SMT1TMRL        equ	16146	;# 
   600   003F13                     SMT1TMRH        equ	16147	;# 
   601   003F14                     SMT1TMRU        equ	16148	;# 
   602   003F15                     SMT1CPR         equ	16149	;# 
   603   003F15                     SMT1CPRL        equ	16149	;# 
   604   003F16                     SMT1CPRH        equ	16150	;# 
   605   003F17                     SMT1CPRU        equ	16151	;# 
   606   003F18                     SMT1CPW         equ	16152	;# 
   607   003F18                     SMT1CPWL        equ	16152	;# 
   608   003F19                     SMT1CPWH        equ	16153	;# 
   609   003F1A                     SMT1CPWU        equ	16154	;# 
   610   003F1B                     SMT1PR          equ	16155	;# 
   611   003F1B                     SMT1PRL         equ	16155	;# 
   612   003F1C                     SMT1PRH         equ	16156	;# 
   613   003F1D                     SMT1PRU         equ	16157	;# 
   614   003F1E                     SMT1CON0        equ	16158	;# 
   615   003F1F                     SMT1CON1        equ	16159	;# 
   616   003F20                     SMT1STAT        equ	16160	;# 
   617   003F21                     SMT1CLK         equ	16161	;# 
   618   003F22                     SMT1SIG         equ	16162	;# 
   619   003F23                     SMT1WIN         equ	16163	;# 
   620   003F38                     NCO1ACC         equ	16184	;# 
   621   003F38                     NCO1ACCL        equ	16184	;# 
   622   003F39                     NCO1ACCH        equ	16185	;# 
   623   003F3A                     NCO1ACCU        equ	16186	;# 
   624   003F3B                     NCO1INC         equ	16187	;# 
   625   003F3B                     NCO1INCL        equ	16187	;# 
   626   003F3C                     NCO1INCH        equ	16188	;# 
   627   003F3D                     NCO1INCU        equ	16189	;# 
   628   003F3E                     NCO1CON         equ	16190	;# 
   629   003F3F                     NCO1CLK         equ	16191	;# 
   630   003F40                     CWG3CLK         equ	16192	;# 
   631   003F40                     CWG3CLKCON      equ	16192	;# 
   632   003F41                     CWG3ISM         equ	16193	;# 
   633   003F41                     CWG3DAT         equ	16193	;# 
   634   003F42                     CWG3DBR         equ	16194	;# 
   635   003F43                     CWG3DBF         equ	16195	;# 
   636   003F44                     CWG3CON0        equ	16196	;# 
   637   003F45                     CWG3CON1        equ	16197	;# 
   638   003F46                     CWG3AS0         equ	16198	;# 
   639   003F47                     CWG3AS1         equ	16199	;# 
   640   003F48                     CWG3STR         equ	16200	;# 
   641   003F49                     CWG2CLK         equ	16201	;# 
   642   003F49                     CWG2CLKCON      equ	16201	;# 
   643   003F4A                     CWG2ISM         equ	16202	;# 
   644   003F4A                     CWG2DAT         equ	16202	;# 
   645   003F4B                     CWG2DBR         equ	16203	;# 
   646   003F4C                     CWG2DBF         equ	16204	;# 
   647   003F4D                     CWG2CON0        equ	16205	;# 
   648   003F4E                     CWG2CON1        equ	16206	;# 
   649   003F4F                     CWG2AS0         equ	16207	;# 
   650   003F50                     CWG2AS1         equ	16208	;# 
   651   003F51                     CWG2STR         equ	16209	;# 
   652   003F52                     CWG1CLK         equ	16210	;# 
   653   003F52                     CWG1CLKCON      equ	16210	;# 
   654   003F53                     CWG1ISM         equ	16211	;# 
   655   003F53                     CWG1DAT         equ	16211	;# 
   656   003F54                     CWG1DBR         equ	16212	;# 
   657   003F55                     CWG1DBF         equ	16213	;# 
   658   003F56                     CWG1CON0        equ	16214	;# 
   659   003F57                     CWG1CON1        equ	16215	;# 
   660   003F58                     CWG1AS0         equ	16216	;# 
   661   003F59                     CWG1AS1         equ	16217	;# 
   662   003F5A                     CWG1STR         equ	16218	;# 
   663   003F5E                     CCPTMRS0        equ	16222	;# 
   664   003F5F                     CCPTMRS1        equ	16223	;# 
   665   003F60                     PWM8DC          equ	16224	;# 
   666   003F60                     PWM8DCL         equ	16224	;# 
   667   003F61                     PWM8DCH         equ	16225	;# 
   668   003F62                     PWM8CON         equ	16226	;# 
   669   003F64                     PWM7DC          equ	16228	;# 
   670   003F64                     PWM7DCL         equ	16228	;# 
   671   003F65                     PWM7DCH         equ	16229	;# 
   672   003F66                     PWM7CON         equ	16230	;# 
   673   003F68                     PWM6DC          equ	16232	;# 
   674   003F68                     PWM6DCL         equ	16232	;# 
   675   003F69                     PWM6DCH         equ	16233	;# 
   676   003F6A                     PWM6CON         equ	16234	;# 
   677   003F6C                     PWM5DC          equ	16236	;# 
   678   003F6C                     PWM5DCL         equ	16236	;# 
   679   003F6D                     PWM5DCH         equ	16237	;# 
   680   003F6E                     PWM5CON         equ	16238	;# 
   681   003F70                     CCPR4           equ	16240	;# 
   682   003F70                     CCPR4L          equ	16240	;# 
   683   003F71                     CCPR4H          equ	16241	;# 
   684   003F72                     CCP4CON         equ	16242	;# 
   685   003F73                     CCP4CAP         equ	16243	;# 
   686   003F74                     CCPR3           equ	16244	;# 
   687   003F74                     CCPR3L          equ	16244	;# 
   688   003F75                     CCPR3H          equ	16245	;# 
   689   003F76                     CCP3CON         equ	16246	;# 
   690   003F77                     CCP3CAP         equ	16247	;# 
   691   003F78                     CCPR2           equ	16248	;# 
   692   003F78                     CCPR2L          equ	16248	;# 
   693   003F79                     CCPR2H          equ	16249	;# 
   694   003F7A                     CCP2CON         equ	16250	;# 
   695   003F7B                     CCP2CAP         equ	16251	;# 
   696   003F7C                     CCPR1           equ	16252	;# 
   697   003F7C                     CCPR1L          equ	16252	;# 
   698   003F7D                     CCPR1H          equ	16253	;# 
   699   003F7E                     CCP1CON         equ	16254	;# 
   700   003F7F                     CCP1CAP         equ	16255	;# 
   701   003F92                     T6TMR           equ	16274	;# 
   702   003F92                     TMR6            equ	16274	;# 
   703   003F93                     T6PR            equ	16275	;# 
   704   003F93                     PR6             equ	16275	;# 
   705   003F94                     T6CON           equ	16276	;# 
   706   003F95                     T6HLT           equ	16277	;# 
   707   003F96                     T6CLKCON        equ	16278	;# 
   708   003F96                     T6CLK           equ	16278	;# 
   709   003F97                     T6RST           equ	16279	;# 
   710   003F98                     TMR5            equ	16280	;# 
   711   003F98                     TMR5L           equ	16280	;# 
   712   003F99                     TMR5H           equ	16281	;# 
   713   003F9A                     T5CON           equ	16282	;# 
   714   003F9A                     TMR5CON         equ	16282	;# 
   715   003F9B                     T5GCON          equ	16283	;# 
   716   003F9B                     TMR5GCON        equ	16283	;# 
   717   003F9C                     T5GATE          equ	16284	;# 
   718   003F9C                     TMR5GATE        equ	16284	;# 
   719   003F9D                     T5CLK           equ	16285	;# 
   720   003F9D                     TMR5CLK         equ	16285	;# 
   721   003F9D                     PR5             equ	16285	;# 
   722   003F9E                     T4TMR           equ	16286	;# 
   723   003F9E                     TMR4            equ	16286	;# 
   724   003F9F                     T4PR            equ	16287	;# 
   725   003F9F                     PR4             equ	16287	;# 
   726   003FA0                     T4CON           equ	16288	;# 
   727   003FA1                     T4HLT           equ	16289	;# 
   728   003FA2                     T4CLKCON        equ	16290	;# 
   729   003FA2                     T4CLK           equ	16290	;# 
   730   003FA3                     T4RST           equ	16291	;# 
   731   003FA4                     TMR3            equ	16292	;# 
   732   003FA4                     TMR3L           equ	16292	;# 
   733   003FA5                     TMR3H           equ	16293	;# 
   734   003FA6                     T3CON           equ	16294	;# 
   735   003FA6                     TMR3CON         equ	16294	;# 
   736   003FA7                     T3GCON          equ	16295	;# 
   737   003FA7                     TMR3GCON        equ	16295	;# 
   738   003FA8                     T3GATE          equ	16296	;# 
   739   003FA8                     TMR3GATE        equ	16296	;# 
   740   003FA9                     T3CLK           equ	16297	;# 
   741   003FA9                     TMR3CLK         equ	16297	;# 
   742   003FA9                     PR3             equ	16297	;# 
   743   003FAA                     T2TMR           equ	16298	;# 
   744   003FAA                     TMR2            equ	16298	;# 
   745   003FAB                     T2PR            equ	16299	;# 
   746   003FAB                     PR2             equ	16299	;# 
   747   003FAC                     T2CON           equ	16300	;# 
   748   003FAD                     T2HLT           equ	16301	;# 
   749   003FAE                     T2CLKCON        equ	16302	;# 
   750   003FAE                     T2CLK           equ	16302	;# 
   751   003FAF                     T2RST           equ	16303	;# 
   752   003FB0                     TMR1            equ	16304	;# 
   753   003FB0                     TMR1L           equ	16304	;# 
   754   003FB1                     TMR1H           equ	16305	;# 
   755   003FB2                     T1CON           equ	16306	;# 
   756   003FB2                     TMR1CON         equ	16306	;# 
   757   003FB3                     T1GCON          equ	16307	;# 
   758   003FB3                     TMR1GCON        equ	16307	;# 
   759   003FB4                     T1GATE          equ	16308	;# 
   760   003FB4                     TMR1GATE        equ	16308	;# 
   761   003FB5                     T1CLK           equ	16309	;# 
   762   003FB5                     TMR1CLK         equ	16309	;# 
   763   003FB5                     PR1             equ	16309	;# 
   764   003FB6                     TMR0L           equ	16310	;# 
   765   003FB6                     TMR0            equ	16310	;# 
   766   003FB7                     TMR0H           equ	16311	;# 
   767   003FB7                     PR0             equ	16311	;# 
   768   003FB8                     T0CON0          equ	16312	;# 
   769   003FB9                     T0CON1          equ	16313	;# 
   770   003FBA                     LATA            equ	16314	;# 
   771   003FBB                     LATB            equ	16315	;# 
   772   003FBC                     LATC            equ	16316	;# 
   773   003FBD                     LATD            equ	16317	;# 
   774   003FBE                     LATE            equ	16318	;# 
   775   003FC2                     TRISA           equ	16322	;# 
   776   003FC3                     TRISB           equ	16323	;# 
   777   003FC4                     TRISC           equ	16324	;# 
   778   003FC5                     TRISD           equ	16325	;# 
   779   003FC6                     TRISE           equ	16326	;# 
   780   003FCA                     PORTA           equ	16330	;# 
   781   003FCB                     PORTB           equ	16331	;# 
   782   003FCC                     PORTC           equ	16332	;# 
   783   003FCD                     PORTD           equ	16333	;# 
   784   003FCE                     PORTE           equ	16334	;# 
   785   003FD2                     INTCON0         equ	16338	;# 
   786   003FD3                     INTCON1         equ	16339	;# 
   787   003FD4                     IVTLOCK         equ	16340	;# 
   788   003FD5                     IVTBASE         equ	16341	;# 
   789   003FD5                     IVTBASEL        equ	16341	;# 
   790   003FD6                     IVTBASEH        equ	16342	;# 
   791   003FD7                     IVTBASEU        equ	16343	;# 
   792   003FD8                     STATUS          equ	16344	;# 
   793   003FD9                     FSR2            equ	16345	;# 
   794   003FD9                     FSR2L           equ	16345	;# 
   795   003FDA                     FSR2H           equ	16346	;# 
   796   003FDB                     PLUSW2          equ	16347	;# 
   797   003FDC                     PREINC2         equ	16348	;# 
   798   003FDD                     POSTDEC2        equ	16349	;# 
   799   003FDE                     POSTINC2        equ	16350	;# 
   800   003FDF                     INDF2           equ	16351	;# 
   801   003FE0                     BSR             equ	16352	;# 
   802   003FE1                     FSR1            equ	16353	;# 
   803   003FE1                     FSR1L           equ	16353	;# 
   804   003FE2                     FSR1H           equ	16354	;# 
   805   003FE3                     PLUSW1          equ	16355	;# 
   806   003FE4                     PREINC1         equ	16356	;# 
   807   003FE5                     POSTDEC1        equ	16357	;# 
   808   003FE6                     POSTINC1        equ	16358	;# 
   809   003FE7                     INDF1           equ	16359	;# 
   810   003FE8                     WREG            equ	16360	;# 
   811   003FE9                     FSR0            equ	16361	;# 
   812   003FE9                     FSR0L           equ	16361	;# 
   813   003FEA                     FSR0H           equ	16362	;# 
   814   003FEB                     PLUSW0          equ	16363	;# 
   815   003FEC                     PREINC0         equ	16364	;# 
   816   003FED                     POSTDEC0        equ	16365	;# 
   817   003FEE                     POSTINC0        equ	16366	;# 
   818   003FEF                     INDF0           equ	16367	;# 
   819   003FF0                     PCON0           equ	16368	;# 
   820   003FF1                     PCON1           equ	16369	;# 
   821   003FF3                     PROD            equ	16371	;# 
   822   003FF3                     PRODL           equ	16371	;# 
   823   003FF4                     PRODH           equ	16372	;# 
   824   003FF5                     TABLAT          equ	16373	;# 
   825   003FF6                     TBLPTR          equ	16374	;# 
   826   003FF6                     TBLPTRL         equ	16374	;# 
   827   003FF7                     TBLPTRH         equ	16375	;# 
   828   003FF8                     TBLPTRU         equ	16376	;# 
   829   003FF9                     PCLAT           equ	16377	;# 
   830   003FF9                     PCL             equ	16377	;# 
   831   003FFA                     PCLATH          equ	16378	;# 
   832   003FFB                     PCLATU          equ	16379	;# 
   833   003FFC                     STKPTR          equ	16380	;# 
   834   003FFD                     TOS             equ	16381	;# 
   835   003FFD                     TOSL            equ	16381	;# 
   836   003FFE                     TOSH            equ	16382	;# 
   837   003FFF                     TOSU            equ	16383	;# 
   838                           
   839                           	psect	idataCOMRAM
   840   002768                     __pidataCOMRAM:
   841                           	callstack 0
   842                           
   843                           ;initializer for _sevSeg
   844   002768  3F                 	db	63
   845   002769  06                 	db	6
   846   00276A  5B                 	db	91
   847   00276B  4F                 	db	79
   848   00276C  66                 	db	102
   849   00276D  6D                 	db	109
   850   00276E  7D                 	db	125
   851   00276F  07                 	db	7
   852   002770  7F                 	db	127
   853   002771  6F                 	db	111
   854   003A70                     _ANSELD         set	14960
   855   003A60                     _ANSELC         set	14944
   856   003A50                     _ANSELB         set	14928
   857   003A40                     _ANSELA         set	14912
   858   003EFA                     _ADCON2         set	16122
   859   003EF9                     _ADCON1         set	16121
   860   003EF8                     _ADCON0         set	16120
   861   003FCB                     _PORTBbits      set	16331
   862   003FCA                     _PORTAbits      set	16330
   863   003FCD                     _PORTDbits      set	16333
   864   003FBD                     _LATD           set	16317
   865   003FBC                     _LATC           set	16316
   866   003FBA                     _LATA           set	16314
   867   003F7A                     _CCP2CON        set	16250
   868   003FB2                     _T1CON          set	16306
   869   003FC5                     _TRISD          set	16325
   870   003FC4                     _TRISC          set	16324
   871   003FC3                     _TRISB          set	16323
   872   003FC2                     _TRISA          set	16322
   873                           
   874                           ; #config settings
   875                           
   876                           	psect	cinit
   877   002740                     __pcinit:
   878                           	callstack 0
   879   002740                     start_initialization:
   880                           	callstack 0
   881   002740                     __initialization:
   882                           	callstack 0
   883                           
   884                           ; Initialize objects allocated to COMRAM (10 bytes)
   885                           ; load TBLPTR registers with __pidataCOMRAM
   886   002740  0E68               	movlw	low __pidataCOMRAM
   887   002742  6EF6               	movwf	tblptrl,c
   888   002744  0E27               	movlw	high __pidataCOMRAM
   889   002746  6EF7               	movwf	tblptrh,c
   890   002748  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   891   00274A  6EF8               	movwf	tblptru,c
   892   00274C  EE00  F01A         	lfsr	0,__pdataCOMRAM
   893   002750  EE10 F00A          	lfsr	1,10
   894   002754                     copy_data0:
   895   002754  0009               	tblrd		*+
   896   002756  006F FFD7 FFEE     	movff	tablat,postinc0
   897   00275C  50E5               	movf	postdec1,w,c
   898   00275E  50E1               	movf	fsr1l,w,c
   899   002760  E1F9               	bnz	copy_data0
   900   002762                     end_of_initialization:
   901                           	callstack 0
   902   002762                     __end_of__initialization:
   903                           	callstack 0
   904   002762  0100               	movlb	0
   905   002764  EF01  F010         	goto	_main	;jump to C main() function
   906                           
   907                           	psect	dataCOMRAM
   908   00001A                     __pdataCOMRAM:
   909                           	callstack 0
   910   00001A                     _sevSeg:
   911                           	callstack 0
   912   00001A                     	ds	10
   913                           
   914                           	psect	cstackCOMRAM
   915   000001                     __pcstackCOMRAM:
   916                           	callstack 0
   917   000001                     ?___wmul:
   918                           	callstack 0
   919   000001                     ?___awdiv:
   920                           	callstack 0
   921   000001                     ?___awmod:
   922                           	callstack 0
   923   000001                     ___wmul@multiplier:
   924                           	callstack 0
   925   000001                     ___awdiv@dividend:
   926                           	callstack 0
   927   000001                     ___awmod@dividend:
   928                           	callstack 0
   929   000001                     
   930                           ; 1 bytes @ 0x0
   931   000001                     	ds	2
   932   000003                     ___wmul@multiplicand:
   933                           	callstack 0
   934   000003                     ___awdiv@divisor:
   935                           	callstack 0
   936   000003                     ___awmod@divisor:
   937                           	callstack 0
   938                           
   939                           ; 2 bytes @ 0x2
   940   000003                     	ds	2
   941   000005                     ___awdiv@counter:
   942                           	callstack 0
   943   000005                     ___awmod@counter:
   944                           	callstack 0
   945   000005                     ___wmul@product:
   946                           	callstack 0
   947   000005                     
   948                           ; 1 bytes @ 0x4
   949   000005                     	ds	1
   950   000006                     ___awdiv@sign:
   951                           	callstack 0
   952   000006                     ___awmod@sign:
   953                           	callstack 0
   954                           
   955                           ; 1 bytes @ 0x5
   956   000006                     	ds	1
   957   000007                     ___awdiv@quotient:
   958                           	callstack 0
   959                           
   960                           ; 2 bytes @ 0x6
   961   000007                     	ds	2
   962   000009                     ?_calculate:
   963                           	callstack 0
   964   000009                     display@dValue:
   965                           	callstack 0
   966   000009                     calculate@val1:
   967                           	callstack 0
   968                           
   969                           ; 2 bytes @ 0x8
   970   000009                     	ds	2
   971   00000B                     display@digit2:
   972                           	callstack 0
   973   00000B                     calculate@val2:
   974                           	callstack 0
   975   00000B                     
   976                           ; 1 bytes @ 0xA
   977   00000B                     	ds	2
   978   00000D                     calculate@op:
   979                           	callstack 0
   980   00000D                     display@digit1:
   981                           	callstack 0
   982                           
   983                           ; 2 bytes @ 0xC
   984   00000D                     	ds	1
   985   00000E                     ??_calculate:
   986                           
   987                           ; 1 bytes @ 0xD
   988   00000E                     	ds	2
   989   000010                     ??_main:
   990                           
   991                           ; 1 bytes @ 0xF
   992   000010                     	ds	2
   993   000012                     main@result:
   994                           	callstack 0
   995                           
   996                           ; 2 bytes @ 0x11
   997   000012                     	ds	2
   998   000014                     main@value1:
   999                           	callstack 0
  1000                           
  1001                           ; 2 bytes @ 0x13
  1002   000014                     	ds	2
  1003   000016                     main@operator:
  1004                           	callstack 0
  1005                           
  1006                           ; 1 bytes @ 0x15
  1007   000016                     	ds	1
  1008   000017                     main@value2:
  1009                           	callstack 0
  1010                           
  1011                           ; 2 bytes @ 0x16
  1012   000017                     	ds	2
  1013   000019                     main@ret1:
  1014                           	callstack 0
  1015                           
  1016                           ; 1 bytes @ 0x18
  1017   000019                     	ds	1
  1018                           
  1019 ;;
  1020 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1021 ;;
  1022 ;; *************** function _main *****************
  1023 ;; Defined at:
  1024 ;;		line 112 in file "lab7.c"
  1025 ;; Parameters:    Size  Location     Type
  1026 ;;		None
  1027 ;; Auto vars:     Size  Location     Type
  1028 ;;  value2          2   22[COMRAM] int 
  1029 ;;  value1          2   19[COMRAM] int 
  1030 ;;  result          2   17[COMRAM] int 
  1031 ;;  ret1            1   24[COMRAM] enum E16765
  1032 ;;  operator        1   21[COMRAM] enum E16765
  1033 ;; Return value:  Size  Location     Type
  1034 ;;                  1    wreg      void 
  1035 ;; Registers used:
  1036 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1037 ;; Tracked objects:
  1038 ;;		On entry : 0/0
  1039 ;;		On exit  : 0/0
  1040 ;;		Unchanged: 0/0
  1041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  1042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1043 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1044 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1045 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1046 ;;Total ram usage:       10 bytes
  1047 ;; Hardware stack levels required when called: 2
  1048 ;; This function calls:
  1049 ;;		___wmul
  1050 ;;		_calculate
  1051 ;;		_display
  1052 ;;		_scanKeypad
  1053 ;; This function is called by:
  1054 ;;		Startup code after reset
  1055 ;; This function uses a non-reentrant model
  1056 ;;
  1057                           
  1058                           	psect	text0
  1059   002002                     __ptext0:
  1060                           	callstack 0
  1061   002002                     _main:
  1062                           	callstack 29
  1063   002002                     
  1064                           ;lab7.c: 113:     enum VALUE ret1;;lab7.c: 114:     enum VALUE operator;;lab7.c: 115:   
      +                            int value1, value2, result;;lab7.c: 117:     TRISA = 0x00;
  1065   002002  6AC2               	clrf	194,c	;volatile
  1066   002004                     
  1067                           ;lab7.c: 118:     TRISB = 0b00001111;
  1068   002004  0E0F               	movlw	15
  1069   002006  6EC3               	movwf	195,c	;volatile
  1070   002008                     
  1071                           ;lab7.c: 119:     TRISC = 0x00;
  1072   002008  6AC4               	clrf	196,c	;volatile
  1073   00200A                     
  1074                           ;lab7.c: 120:     TRISD = 0x00;
  1075   00200A  6AC5               	clrf	197,c	;volatile
  1076   00200C                     
  1077                           ;lab7.c: 122:     ADCON0 = 0;
  1078   00200C  013E               	movlb	62	; () banked
  1079   00200E  6BF8               	clrf	248,b	;volatile
  1080   002010                     
  1081                           ; BSR set to: 62
  1082                           ;lab7.c: 123:     ADCON1 = 0;
  1083   002010  6BF9               	clrf	249,b	;volatile
  1084   002012                     
  1085                           ; BSR set to: 62
  1086                           ;lab7.c: 124:     ADCON2 = 0;
  1087   002012  6BFA               	clrf	250,b	;volatile
  1088   002014                     
  1089                           ; BSR set to: 62
  1090                           ;lab7.c: 125:     T1CON = 0;
  1091   002014  6AB2               	clrf	178,c	;volatile
  1092   002016                     
  1093                           ; BSR set to: 62
  1094                           ;lab7.c: 126:     ANSELA = 0;
  1095   002016  013A               	movlb	58	; () banked
  1096   002018  6B40               	clrf	64,b	;volatile
  1097   00201A                     
  1098                           ; BSR set to: 58
  1099                           ;lab7.c: 127:     ANSELB = 0;
  1100   00201A  6B50               	clrf	80,b	;volatile
  1101   00201C                     
  1102                           ; BSR set to: 58
  1103                           ;lab7.c: 128:     ANSELC = 0;
  1104   00201C  6B60               	clrf	96,b	;volatile
  1105   00201E                     
  1106                           ; BSR set to: 58
  1107                           ;lab7.c: 129:     ANSELD = 0;
  1108   00201E  6B70               	clrf	112,b	;volatile
  1109   002020                     
  1110                           ; BSR set to: 58
  1111                           ;lab7.c: 131:     CCP2CON = 0x00;
  1112   002020  6A7A               	clrf	122,c	;volatile
  1113   002022                     l1347:
  1114                           
  1115                           ;lab7.c: 135:         ret1 = NOVALUE;
  1116   002022  6819               	setf	main@ret1^0,c
  1117   002024                     
  1118                           ;lab7.c: 136:         operator = NOVALUE;
  1119   002024  6816               	setf	main@operator^0,c
  1120                           
  1121                           ;lab7.c: 137:         value1 = 0;
  1122   002026  0E00               	movlw	0
  1123   002028  6E15               	movwf	(main@value1+1)^0,c
  1124   00202A  0E00               	movlw	0
  1125   00202C  6E14               	movwf	main@value1^0,c
  1126                           
  1127                           ;lab7.c: 138:         value2 = 0;
  1128   00202E  0E00               	movlw	0
  1129   002030  6E18               	movwf	(main@value2+1)^0,c
  1130   002032  0E00               	movlw	0
  1131   002034  6E17               	movwf	main@value2^0,c
  1132                           
  1133                           ;lab7.c: 141:         while((int)ret1 >= 100) {
  1134   002036  EF38  F010         	goto	l1359
  1135   00203A                     l1351:
  1136                           
  1137                           ;lab7.c: 142:             ret1 = scanKeypad();
  1138   00203A  EC62  F011         	call	_scanKeypad	;wreg free
  1139   00203E  6E19               	movwf	main@ret1^0,c
  1140   002040                     
  1141                           ;lab7.c: 143:             if (ret1 >= 100 && ret1 < 105) {
  1142   002040  0E63               	movlw	99
  1143   002042  6419               	cpfsgt	main@ret1^0,c
  1144   002044  EF26  F010         	goto	u641
  1145   002048  EF28  F010         	goto	u640
  1146   00204C                     u641:
  1147   00204C  EF38  F010         	goto	l1359
  1148   002050                     u640:
  1149   002050  0E69               	movlw	105
  1150   002052  6019               	cpfslt	main@ret1^0,c
  1151   002054  EF2E  F010         	goto	u651
  1152   002058  EF30  F010         	goto	u650
  1153   00205C                     u651:
  1154   00205C  EF38  F010         	goto	l1359
  1155   002060                     u650:
  1156   002060                     
  1157                           ;lab7.c: 144:                 display(33);
  1158   002060  0E00               	movlw	0
  1159   002062  6E0A               	movwf	(display@dValue+1)^0,c
  1160   002064  0E21               	movlw	33
  1161   002066  6E09               	movwf	display@dValue^0,c
  1162   002068  EC06  F012         	call	_display	;wreg free
  1163   00206C                     l57:
  1164   00206C  EF36  F010         	goto	l57
  1165   002070                     l1359:
  1166                           
  1167                           ;lab7.c: 141:         while((int)ret1 >= 100) {
  1168   002070  0E64               	movlw	100
  1169   002072  6019               	cpfslt	main@ret1^0,c
  1170   002074  EF3E  F010         	goto	u661
  1171   002078  EF40  F010         	goto	u660
  1172   00207C                     u661:
  1173   00207C  EF1D  F010         	goto	l1351
  1174   002080                     u660:
  1175   002080                     
  1176                           ;lab7.c: 148:         value1 += (int)ret1;
  1177   002080  5019               	movf	main@ret1^0,w,c
  1178   002082  2614               	addwf	main@value1^0,f,c
  1179   002084  0E00               	movlw	0
  1180   002086  2215               	addwfc	(main@value1+1)^0,f,c
  1181   002088                     
  1182                           ;lab7.c: 149:         display(value1);
  1183   002088  C014  F009         	movff	main@value1,display@dValue
  1184   00208C  C015  F00A         	movff	main@value1+1,display@dValue+1
  1185   002090  EC06  F012         	call	_display	;wreg free
  1186   002094                     
  1187                           ;lab7.c: 150:         _delay((unsigned long)((300)*(4000000/4000.0)));
  1188   002094  0E02               	movlw	2
  1189   002096  6E11               	movwf	(??_main+1)^0,c
  1190   002098  0E86               	movlw	134
  1191   00209A  6E10               	movwf	??_main^0,c
  1192   00209C  0E99               	movlw	153
  1193   00209E                     u787:
  1194   00209E  2EE8               	decfsz	wreg,f,c
  1195   0020A0  D7FE               	bra	u787
  1196   0020A2  2E10               	decfsz	??_main^0,f,c
  1197   0020A4  D7FC               	bra	u787
  1198   0020A6  2E11               	decfsz	(??_main+1)^0,f,c
  1199   0020A8  D7FA               	bra	u787
  1200   0020AA  0000               	nop	
  1201   0020AC                     
  1202                           ;lab7.c: 151:         ret1 = NOVALUE;
  1203   0020AC  6819               	setf	main@ret1^0,c
  1204                           
  1205                           ;lab7.c: 153:         while((ret1 == NOVALUE) && (ret1 != COMPUTE)) {
  1206   0020AE  EF5C  F010         	goto	l1371
  1207   0020B2                     l1369:
  1208                           
  1209                           ;lab7.c: 154:             ret1 = scanKeypad();
  1210   0020B2  EC62  F011         	call	_scanKeypad	;wreg free
  1211   0020B6  6E19               	movwf	main@ret1^0,c
  1212   0020B8                     l1371:
  1213                           
  1214                           ;lab7.c: 153:         while((ret1 == NOVALUE) && (ret1 != COMPUTE)) {
  1215   0020B8  2819               	incf	main@ret1^0,w,c
  1216   0020BA  A4D8               	btfss	status,2,c
  1217   0020BC  EF62  F010         	goto	u671
  1218   0020C0  EF64  F010         	goto	u670
  1219   0020C4                     u671:
  1220   0020C4  EF6D  F010         	goto	l1375
  1221   0020C8                     u670:
  1222   0020C8  0E69               	movlw	105
  1223   0020CA  1819               	xorwf	main@ret1^0,w,c
  1224   0020CC  A4D8               	btfss	status,2,c
  1225   0020CE  EF6B  F010         	goto	u681
  1226   0020D2  EF6D  F010         	goto	u680
  1227   0020D6                     u681:
  1228   0020D6  EF59  F010         	goto	l1369
  1229   0020DA                     u680:
  1230   0020DA                     l1375:
  1231                           
  1232                           ;lab7.c: 158:         if (ret1 < 100) {
  1233   0020DA  0E64               	movlw	100
  1234   0020DC  6019               	cpfslt	main@ret1^0,c
  1235   0020DE  EF73  F010         	goto	u691
  1236   0020E2  EF75  F010         	goto	u690
  1237   0020E6                     u691:
  1238   0020E6  EFB0  F010         	goto	l66
  1239   0020EA                     u690:
  1240   0020EA                     
  1241                           ;lab7.c: 159:             value1 *= 10;
  1242   0020EA  C014  F001         	movff	main@value1,___wmul@multiplier
  1243   0020EE  C015  F002         	movff	main@value1+1,___wmul@multiplier+1
  1244   0020F2  0E00               	movlw	0
  1245   0020F4  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1246   0020F6  0E0A               	movlw	10
  1247   0020F8  6E03               	movwf	___wmul@multiplicand^0,c
  1248   0020FA  EC8B  F013         	call	___wmul	;wreg free
  1249   0020FE  C001  F014         	movff	?___wmul,main@value1
  1250   002102  C002  F015         	movff	?___wmul+1,main@value1+1
  1251   002106                     
  1252                           ;lab7.c: 160:             value1 += ret1;
  1253   002106  5019               	movf	main@ret1^0,w,c
  1254   002108  2614               	addwf	main@value1^0,f,c
  1255   00210A  0E00               	movlw	0
  1256   00210C  2215               	addwfc	(main@value1+1)^0,f,c
  1257   00210E                     
  1258                           ;lab7.c: 161:             display(value1);
  1259   00210E  C014  F009         	movff	main@value1,display@dValue
  1260   002112  C015  F00A         	movff	main@value1+1,display@dValue+1
  1261   002116  EC06  F012         	call	_display	;wreg free
  1262   00211A                     
  1263                           ;lab7.c: 162:             _delay((unsigned long)((300)*(4000000/4000.0)));
  1264   00211A  0E02               	movlw	2
  1265   00211C  6E11               	movwf	(??_main+1)^0,c
  1266   00211E  0E86               	movlw	134
  1267   002120  6E10               	movwf	??_main^0,c
  1268   002122  0E99               	movlw	153
  1269   002124                     u797:
  1270   002124  2EE8               	decfsz	wreg,f,c
  1271   002126  D7FE               	bra	u797
  1272   002128  2E10               	decfsz	??_main^0,f,c
  1273   00212A  D7FC               	bra	u797
  1274   00212C  2E11               	decfsz	(??_main+1)^0,f,c
  1275   00212E  D7FA               	bra	u797
  1276   002130  0000               	nop	
  1277   002132                     
  1278                           ;lab7.c: 165:             while((operator < 100) || (operator > 104)) {
  1279   002132  EF9E  F010         	goto	l1389
  1280   002136                     l1387:
  1281                           
  1282                           ;lab7.c: 166:                 operator = scanKeypad();
  1283   002136  EC62  F011         	call	_scanKeypad	;wreg free
  1284   00213A  6E16               	movwf	main@operator^0,c
  1285   00213C                     l1389:
  1286                           
  1287                           ;lab7.c: 165:             while((operator < 100) || (operator > 104)) {
  1288   00213C  0E63               	movlw	99
  1289   00213E  6416               	cpfsgt	main@operator^0,c
  1290   002140  EFA4  F010         	goto	u701
  1291   002144  EFA6  F010         	goto	u700
  1292   002148                     u701:
  1293   002148  EF9B  F010         	goto	l1387
  1294   00214C                     u700:
  1295   00214C  0E69               	movlw	105
  1296   00214E  6016               	cpfslt	main@operator^0,c
  1297   002150  EFAC  F010         	goto	u711
  1298   002154  EFAE  F010         	goto	u710
  1299   002158                     u711:
  1300   002158  EF9B  F010         	goto	l1387
  1301   00215C                     u710:
  1302   00215C  EFB2  F010         	goto	l70
  1303   002160                     l66:
  1304                           
  1305                           ;lab7.c: 170:             operator = ret1;
  1306   002160  C019  F016         	movff	main@ret1,main@operator
  1307   002164                     l70:
  1308                           
  1309                           ;lab7.c: 172:         ret1 = NOVALUE;
  1310   002164  6819               	setf	main@ret1^0,c
  1311   002166                     
  1312                           ;lab7.c: 173:         display(operator);
  1313   002166  C016  F009         	movff	main@operator,display@dValue
  1314   00216A  6A0A               	clrf	(display@dValue+1)^0,c
  1315   00216C  EC06  F012         	call	_display	;wreg free
  1316   002170                     
  1317                           ;lab7.c: 175:         _delay((unsigned long)((300)*(4000000/4000.0)));
  1318   002170  0E02               	movlw	2
  1319   002172  6E11               	movwf	(??_main+1)^0,c
  1320   002174  0E86               	movlw	134
  1321   002176  6E10               	movwf	??_main^0,c
  1322   002178  0E99               	movlw	153
  1323   00217A                     u807:
  1324   00217A  2EE8               	decfsz	wreg,f,c
  1325   00217C  D7FE               	bra	u807
  1326   00217E  2E10               	decfsz	??_main^0,f,c
  1327   002180  D7FC               	bra	u807
  1328   002182  2E11               	decfsz	(??_main+1)^0,f,c
  1329   002184  D7FA               	bra	u807
  1330   002186  0000               	nop	
  1331                           
  1332                           ;lab7.c: 177:         while(ret1 >= 100) {
  1333   002188  EFC9  F010         	goto	l1399
  1334   00218C                     l1397:
  1335                           
  1336                           ;lab7.c: 178:             ret1 = scanKeypad();
  1337   00218C  EC62  F011         	call	_scanKeypad	;wreg free
  1338   002190  6E19               	movwf	main@ret1^0,c
  1339   002192                     l1399:
  1340                           
  1341                           ;lab7.c: 177:         while(ret1 >= 100) {
  1342   002192  0E64               	movlw	100
  1343   002194  6019               	cpfslt	main@ret1^0,c
  1344   002196  EFCF  F010         	goto	u721
  1345   00219A  EFD1  F010         	goto	u720
  1346   00219E                     u721:
  1347   00219E  EFC6  F010         	goto	l1397
  1348   0021A2                     u720:
  1349   0021A2                     
  1350                           ;lab7.c: 180:         value2 += ret1;
  1351   0021A2  5019               	movf	main@ret1^0,w,c
  1352   0021A4  2617               	addwf	main@value2^0,f,c
  1353   0021A6  0E00               	movlw	0
  1354   0021A8  2218               	addwfc	(main@value2+1)^0,f,c
  1355   0021AA                     
  1356                           ;lab7.c: 181:         display(value2);
  1357   0021AA  C017  F009         	movff	main@value2,display@dValue
  1358   0021AE  C018  F00A         	movff	main@value2+1,display@dValue+1
  1359   0021B2  EC06  F012         	call	_display	;wreg free
  1360   0021B6                     
  1361                           ;lab7.c: 182:         _delay((unsigned long)((300)*(4000000/4000.0)));
  1362   0021B6  0E02               	movlw	2
  1363   0021B8  6E11               	movwf	(??_main+1)^0,c
  1364   0021BA  0E86               	movlw	134
  1365   0021BC  6E10               	movwf	??_main^0,c
  1366   0021BE  0E99               	movlw	153
  1367   0021C0                     u817:
  1368   0021C0  2EE8               	decfsz	wreg,f,c
  1369   0021C2  D7FE               	bra	u817
  1370   0021C4  2E10               	decfsz	??_main^0,f,c
  1371   0021C6  D7FC               	bra	u817
  1372   0021C8  2E11               	decfsz	(??_main+1)^0,f,c
  1373   0021CA  D7FA               	bra	u817
  1374   0021CC  0000               	nop	
  1375   0021CE                     
  1376                           ;lab7.c: 183:         ret1 = NOVALUE;
  1377   0021CE  6819               	setf	main@ret1^0,c
  1378                           
  1379                           ;lab7.c: 186:         while((ret1 >= 100) && (ret1 != COMPUTE)) {
  1380   0021D0  EFED  F010         	goto	l1411
  1381   0021D4                     l1409:
  1382                           
  1383                           ;lab7.c: 187:             ret1 = scanKeypad();
  1384   0021D4  EC62  F011         	call	_scanKeypad	;wreg free
  1385   0021D8  6E19               	movwf	main@ret1^0,c
  1386   0021DA                     l1411:
  1387                           
  1388                           ;lab7.c: 186:         while((ret1 >= 100) && (ret1 != COMPUTE)) {
  1389   0021DA  0E63               	movlw	99
  1390   0021DC  6419               	cpfsgt	main@ret1^0,c
  1391   0021DE  EFF3  F010         	goto	u731
  1392   0021E2  EFF5  F010         	goto	u730
  1393   0021E6                     u731:
  1394   0021E6  EFFE  F010         	goto	l1415
  1395   0021EA                     u730:
  1396   0021EA  0E69               	movlw	105
  1397   0021EC  1819               	xorwf	main@ret1^0,w,c
  1398   0021EE  A4D8               	btfss	status,2,c
  1399   0021F0  EFFC  F010         	goto	u741
  1400   0021F4  EFFE  F010         	goto	u740
  1401   0021F8                     u741:
  1402   0021F8  EFEA  F010         	goto	l1409
  1403   0021FC                     u740:
  1404   0021FC                     l1415:
  1405                           
  1406                           ;lab7.c: 189:         if (ret1 < 100) {
  1407   0021FC  0E64               	movlw	100
  1408   0021FE  6019               	cpfslt	main@ret1^0,c
  1409   002200  EF04  F011         	goto	u751
  1410   002204  EF06  F011         	goto	u750
  1411   002208                     u751:
  1412   002208  EF2C  F011         	goto	l1427
  1413   00220C                     u750:
  1414   00220C                     
  1415                           ;lab7.c: 190:             value2 *= 10;
  1416   00220C  C017  F001         	movff	main@value2,___wmul@multiplier
  1417   002210  C018  F002         	movff	main@value2+1,___wmul@multiplier+1
  1418   002214  0E00               	movlw	0
  1419   002216  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1420   002218  0E0A               	movlw	10
  1421   00221A  6E03               	movwf	___wmul@multiplicand^0,c
  1422   00221C  EC8B  F013         	call	___wmul	;wreg free
  1423   002220  C001  F017         	movff	?___wmul,main@value2
  1424   002224  C002  F018         	movff	?___wmul+1,main@value2+1
  1425   002228                     
  1426                           ;lab7.c: 191:             value2 += ret1;
  1427   002228  5019               	movf	main@ret1^0,w,c
  1428   00222A  2617               	addwf	main@value2^0,f,c
  1429   00222C  0E00               	movlw	0
  1430   00222E  2218               	addwfc	(main@value2+1)^0,f,c
  1431   002230                     
  1432                           ;lab7.c: 192:             display(value2);
  1433   002230  C017  F009         	movff	main@value2,display@dValue
  1434   002234  C018  F00A         	movff	main@value2+1,display@dValue+1
  1435   002238  EC06  F012         	call	_display	;wreg free
  1436                           
  1437                           ;lab7.c: 194:             while(ret1 != COMPUTE) {
  1438   00223C  EF23  F011         	goto	l1425
  1439   002240                     l1423:
  1440                           
  1441                           ;lab7.c: 195:                 ret1 = scanKeypad();
  1442   002240  EC62  F011         	call	_scanKeypad	;wreg free
  1443   002244  6E19               	movwf	main@ret1^0,c
  1444   002246                     l1425:
  1445                           
  1446                           ;lab7.c: 194:             while(ret1 != COMPUTE) {
  1447   002246  0E69               	movlw	105
  1448   002248  1819               	xorwf	main@ret1^0,w,c
  1449   00224A  A4D8               	btfss	status,2,c
  1450   00224C  EF2A  F011         	goto	u761
  1451   002250  EF2C  F011         	goto	u760
  1452   002254                     u761:
  1453   002254  EF20  F011         	goto	l1423
  1454   002258                     u760:
  1455   002258                     l1427:
  1456                           
  1457                           ;lab7.c: 199:         display(value2);
  1458   002258  C017  F009         	movff	main@value2,display@dValue
  1459   00225C  C018  F00A         	movff	main@value2+1,display@dValue+1
  1460   002260  EC06  F012         	call	_display	;wreg free
  1461   002264                     
  1462                           ;lab7.c: 200:         _delay((unsigned long)((300)*(4000000/4000.0)));
  1463   002264  0E02               	movlw	2
  1464   002266  6E11               	movwf	(??_main+1)^0,c
  1465   002268  0E86               	movlw	134
  1466   00226A  6E10               	movwf	??_main^0,c
  1467   00226C  0E99               	movlw	153
  1468   00226E                     u827:
  1469   00226E  2EE8               	decfsz	wreg,f,c
  1470   002270  D7FE               	bra	u827
  1471   002272  2E10               	decfsz	??_main^0,f,c
  1472   002274  D7FC               	bra	u827
  1473   002276  2E11               	decfsz	(??_main+1)^0,f,c
  1474   002278  D7FA               	bra	u827
  1475   00227A  0000               	nop	
  1476   00227C                     
  1477                           ;lab7.c: 201:         result = calculate(value1, value2, operator);
  1478   00227C  C014  F009         	movff	main@value1,calculate@val1
  1479   002280  C015  F00A         	movff	main@value1+1,calculate@val1+1
  1480   002284  C017  F00B         	movff	main@value2,calculate@val2
  1481   002288  C018  F00C         	movff	main@value2+1,calculate@val2+1
  1482   00228C  C016  F00D         	movff	main@operator,calculate@op
  1483   002290  ECD9  F012         	call	_calculate	;wreg free
  1484   002294  C009  F012         	movff	?_calculate,main@result
  1485   002298  C00A  F013         	movff	?_calculate+1,main@result+1
  1486   00229C                     l1433:
  1487   00229C  EC62  F011         	call	_scanKeypad	;wreg free
  1488   0022A0  0A69               	xorlw	105
  1489   0022A2  A4D8               	btfss	status,2,c
  1490   0022A4  EF56  F011         	goto	u771
  1491   0022A8  EF58  F011         	goto	u770
  1492   0022AC                     u771:
  1493   0022AC  EF4E  F011         	goto	l1433
  1494   0022B0                     u770:
  1495   0022B0                     
  1496                           ;lab7.c: 203:         display(result);
  1497   0022B0  C012  F009         	movff	main@result,display@dValue
  1498   0022B4  C013  F00A         	movff	main@result+1,display@dValue+1
  1499   0022B8  EC06  F012         	call	_display	;wreg free
  1500   0022BC  EF11  F010         	goto	l1347
  1501   0022C0  EFFE  F0FF         	goto	start
  1502   0022C4                     __end_of_main:
  1503                           	callstack 0
  1504                           
  1505 ;; *************** function _scanKeypad *****************
  1506 ;; Defined at:
  1507 ;;		line 246 in file "lab7.c"
  1508 ;; Parameters:    Size  Location     Type
  1509 ;;		None
  1510 ;; Auto vars:     Size  Location     Type
  1511 ;;		None
  1512 ;; Return value:  Size  Location     Type
  1513 ;;                  1    wreg      enum E16765
  1514 ;; Registers used:
  1515 ;;		wreg
  1516 ;; Tracked objects:
  1517 ;;		On entry : 0/0
  1518 ;;		On exit  : 0/0
  1519 ;;		Unchanged: 0/0
  1520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  1521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1524 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1525 ;;Total ram usage:        0 bytes
  1526 ;; Hardware stack levels used: 1
  1527 ;; This function calls:
  1528 ;;		Nothing
  1529 ;; This function is called by:
  1530 ;;		_main
  1531 ;; This function uses a non-reentrant model
  1532 ;;
  1533                           
  1534                           	psect	text1
  1535   0022C4                     __ptext1:
  1536                           	callstack 0
  1537   0022C4                     _scanKeypad:
  1538                           	callstack 30
  1539   0022C4                     
  1540                           ;lab7.c: 249:     PORTBbits.RB4 = 0;
  1541   0022C4  98CB               	bcf	203,4,c	;volatile
  1542                           
  1543                           ;lab7.c: 250:     PORTBbits.RB5 = 0;
  1544   0022C6  9ACB               	bcf	203,5,c	;volatile
  1545                           
  1546                           ;lab7.c: 251:     PORTBbits.RB6 = 0;
  1547   0022C8  9CCB               	bcf	203,6,c	;volatile
  1548                           
  1549                           ;lab7.c: 252:     PORTBbits.RB7 = 0;
  1550   0022CA  9ECB               	bcf	203,7,c	;volatile
  1551                           
  1552                           ;lab7.c: 254:     PORTBbits.RB4 = 1;
  1553   0022CC  88CB               	bsf	203,4,c	;volatile
  1554                           
  1555                           ;lab7.c: 255:     if (PORTBbits.RB0 == 1) {
  1556   0022CE  A0CB               	btfss	203,0,c	;volatile
  1557   0022D0  EF6C  F011         	goto	u131
  1558   0022D4  EF6E  F011         	goto	u130
  1559   0022D8                     u131:
  1560   0022D8  EF71  F011         	goto	l99
  1561   0022DC                     u130:
  1562   0022DC                     
  1563                           ;lab7.c: 256:         return one;
  1564   0022DC  0E01               	movlw	1
  1565   0022DE  EF05  F012         	goto	l100
  1566   0022E2                     l99:
  1567                           
  1568                           ;lab7.c: 258:     if (PORTBbits.RB1 == 1) {
  1569   0022E2  A2CB               	btfss	203,1,c	;volatile
  1570   0022E4  EF76  F011         	goto	u141
  1571   0022E8  EF78  F011         	goto	u140
  1572   0022EC                     u141:
  1573   0022EC  EF7B  F011         	goto	l101
  1574   0022F0                     u140:
  1575   0022F0                     
  1576                           ;lab7.c: 259:         return four;
  1577   0022F0  0E04               	movlw	4
  1578   0022F2  EF05  F012         	goto	l100
  1579   0022F6                     l101:
  1580                           
  1581                           ;lab7.c: 261:     if (PORTBbits.RB2 == 1) {
  1582   0022F6  A4CB               	btfss	203,2,c	;volatile
  1583   0022F8  EF80  F011         	goto	u151
  1584   0022FC  EF82  F011         	goto	u150
  1585   002300                     u151:
  1586   002300  EF85  F011         	goto	l102
  1587   002304                     u150:
  1588   002304                     
  1589                           ;lab7.c: 262:         return seven;
  1590   002304  0E07               	movlw	7
  1591   002306  EF05  F012         	goto	l100
  1592   00230A                     l102:
  1593                           
  1594                           ;lab7.c: 264:     PORTBbits.RB4 = 0;
  1595   00230A  98CB               	bcf	203,4,c	;volatile
  1596                           
  1597                           ;lab7.c: 267:     PORTBbits.RB5 = 1;
  1598   00230C  8ACB               	bsf	203,5,c	;volatile
  1599                           
  1600                           ;lab7.c: 268:     if (PORTBbits.RB0 == 1) {
  1601   00230E  A0CB               	btfss	203,0,c	;volatile
  1602   002310  EF8C  F011         	goto	u161
  1603   002314  EF8E  F011         	goto	u160
  1604   002318                     u161:
  1605   002318  EF91  F011         	goto	l103
  1606   00231C                     u160:
  1607   00231C                     
  1608                           ;lab7.c: 269:         return two;
  1609   00231C  0E02               	movlw	2
  1610   00231E  EF05  F012         	goto	l100
  1611   002322                     l103:
  1612   002322  A2CB               	btfss	203,1,c	;volatile
  1613   002324  EF96  F011         	goto	u171
  1614   002328  EF98  F011         	goto	u170
  1615   00232C                     u171:
  1616   00232C  EF9B  F011         	goto	l105
  1617   002330                     u170:
  1618   002330                     
  1619                           ;lab7.c: 272:         return five;
  1620   002330  0E05               	movlw	5
  1621   002332  EF05  F012         	goto	l100
  1622   002336                     l105:
  1623   002336  A4CB               	btfss	203,2,c	;volatile
  1624   002338  EFA0  F011         	goto	u181
  1625   00233C  EFA2  F011         	goto	u180
  1626   002340                     u181:
  1627   002340  EFA5  F011         	goto	l107
  1628   002344                     u180:
  1629   002344                     
  1630                           ;lab7.c: 275:         return eight;
  1631   002344  0E08               	movlw	8
  1632   002346  EF05  F012         	goto	l100
  1633   00234A                     l107:
  1634   00234A  A6CB               	btfss	203,3,c	;volatile
  1635   00234C  EFAA  F011         	goto	u191
  1636   002350  EFAC  F011         	goto	u190
  1637   002354                     u191:
  1638   002354  EFAF  F011         	goto	l104
  1639   002358                     u190:
  1640   002358                     
  1641                           ;lab7.c: 278:         return zero;
  1642   002358  0E00               	movlw	0
  1643   00235A  EF05  F012         	goto	l100
  1644   00235E                     l104:
  1645                           
  1646                           ;lab7.c: 280:     PORTBbits.RB5 = 0;
  1647   00235E  9ACB               	bcf	203,5,c	;volatile
  1648                           
  1649                           ;lab7.c: 283:     PORTBbits.RB6 = 1;
  1650   002360  8CCB               	bsf	203,6,c	;volatile
  1651                           
  1652                           ;lab7.c: 284:     if (PORTBbits.RB0 == 1) { return three; }
  1653   002362  A0CB               	btfss	203,0,c	;volatile
  1654   002364  EFB6  F011         	goto	u201
  1655   002368  EFB8  F011         	goto	u200
  1656   00236C                     u201:
  1657   00236C  EFBB  F011         	goto	l110
  1658   002370                     u200:
  1659   002370  0E03               	movlw	3
  1660   002372  EF05  F012         	goto	l100
  1661   002376                     l110:
  1662   002376  A2CB               	btfss	203,1,c	;volatile
  1663   002378  EFC0  F011         	goto	u211
  1664   00237C  EFC2  F011         	goto	u210
  1665   002380                     u211:
  1666   002380  EFC5  F011         	goto	l112
  1667   002384                     u210:
  1668   002384  0E06               	movlw	6
  1669   002386  EF05  F012         	goto	l100
  1670   00238A                     l112:
  1671   00238A  A4CB               	btfss	203,2,c	;volatile
  1672   00238C  EFCA  F011         	goto	u221
  1673   002390  EFCC  F011         	goto	u220
  1674   002394                     u221:
  1675   002394  EFCF  F011         	goto	l114
  1676   002398                     u220:
  1677   002398  0E09               	movlw	9
  1678   00239A  EF05  F012         	goto	l100
  1679   00239E                     l114:
  1680   00239E  A6CB               	btfss	203,3,c	;volatile
  1681   0023A0  EFD4  F011         	goto	u231
  1682   0023A4  EFD6  F011         	goto	u230
  1683   0023A8                     u231:
  1684   0023A8  EFD9  F011         	goto	l111
  1685   0023AC                     u230:
  1686   0023AC  0E69               	movlw	105
  1687   0023AE  EF05  F012         	goto	l100
  1688   0023B2                     l111:
  1689                           
  1690                           ;lab7.c: 288:     PORTBbits.RB6 = 0;
  1691   0023B2  9CCB               	bcf	203,6,c	;volatile
  1692                           
  1693                           ;lab7.c: 291:     PORTBbits.RB7 = 1;
  1694   0023B4  8ECB               	bsf	203,7,c	;volatile
  1695                           
  1696                           ;lab7.c: 292:     if (PORTBbits.RB0 == 1) { return ADD; }
  1697   0023B6  A0CB               	btfss	203,0,c	;volatile
  1698   0023B8  EFE0  F011         	goto	u241
  1699   0023BC  EFE2  F011         	goto	u240
  1700   0023C0                     u241:
  1701   0023C0  EFE5  F011         	goto	l117
  1702   0023C4                     u240:
  1703   0023C4  0E64               	movlw	100
  1704   0023C6  EF05  F012         	goto	l100
  1705   0023CA                     l117:
  1706   0023CA  A2CB               	btfss	203,1,c	;volatile
  1707   0023CC  EFEA  F011         	goto	u251
  1708   0023D0  EFEC  F011         	goto	u250
  1709   0023D4                     u251:
  1710   0023D4  EFEF  F011         	goto	l119
  1711   0023D8                     u250:
  1712   0023D8  0E65               	movlw	101
  1713   0023DA  EF05  F012         	goto	l100
  1714   0023DE                     l119:
  1715   0023DE  A4CB               	btfss	203,2,c	;volatile
  1716   0023E0  EFF4  F011         	goto	u261
  1717   0023E4  EFF6  F011         	goto	u260
  1718   0023E8                     u261:
  1719   0023E8  EFF9  F011         	goto	l121
  1720   0023EC                     u260:
  1721   0023EC  0E66               	movlw	102
  1722   0023EE  EF05  F012         	goto	l100
  1723   0023F2                     l121:
  1724   0023F2  A6CB               	btfss	203,3,c	;volatile
  1725   0023F4  EFFE  F011         	goto	u271
  1726   0023F8  EF00  F012         	goto	u270
  1727   0023FC                     u271:
  1728   0023FC  EF03  F012         	goto	l118
  1729   002400                     u270:
  1730   002400  0E67               	movlw	103
  1731   002402  EF05  F012         	goto	l100
  1732   002406                     l118:
  1733                           
  1734                           ;lab7.c: 296:     PORTBbits.RB7 = 0;
  1735   002406  9ECB               	bcf	203,7,c	;volatile
  1736   002408                     
  1737                           ;lab7.c: 298:     return NOVALUE;
  1738   002408  0EFF               	movlw	255
  1739   00240A                     l100:
  1740   00240A  0012               	return		;funcret
  1741   00240C                     __end_of_scanKeypad:
  1742                           	callstack 0
  1743                           
  1744 ;; *************** function _display *****************
  1745 ;; Defined at:
  1746 ;;		line 208 in file "lab7.c"
  1747 ;; Parameters:    Size  Location     Type
  1748 ;;  dValue          2    8[COMRAM] int 
  1749 ;; Auto vars:     Size  Location     Type
  1750 ;;  digit1          2   12[COMRAM] int 
  1751 ;;  digit2          2   10[COMRAM] int 
  1752 ;; Return value:  Size  Location     Type
  1753 ;;                  1    wreg      void 
  1754 ;; Registers used:
  1755 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1756 ;; Tracked objects:
  1757 ;;		On entry : 0/0
  1758 ;;		On exit  : 0/0
  1759 ;;		Unchanged: 0/0
  1760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  1761 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1762 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1764 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1765 ;;Total ram usage:        6 bytes
  1766 ;; Hardware stack levels used: 1
  1767 ;; Hardware stack levels required when called: 1
  1768 ;; This function calls:
  1769 ;;		___awdiv
  1770 ;;		___awmod
  1771 ;;		___wmul
  1772 ;; This function is called by:
  1773 ;;		_main
  1774 ;; This function uses a non-reentrant model
  1775 ;;
  1776                           
  1777                           	psect	text2
  1778   00240C                     __ptext2:
  1779                           	callstack 0
  1780   00240C                     _display:
  1781                           	callstack 29
  1782   00240C                     
  1783                           ;lab7.c: 210:     LATA = 0;
  1784   00240C  6ABA               	clrf	186,c	;volatile
  1785                           
  1786                           ;lab7.c: 211:     LATC = 0;
  1787   00240E  6ABC               	clrf	188,c	;volatile
  1788                           
  1789                           ;lab7.c: 212:     LATD = 0;
  1790   002410  6ABD               	clrf	189,c	;volatile
  1791   002412                     
  1792                           ;lab7.c: 214:     if(dValue >= 100) {
  1793   002412  BE0A               	btfsc	(display@dValue+1)^0,7,c
  1794   002414  EF15  F012         	goto	u591
  1795   002418  500A               	movf	(display@dValue+1)^0,w,c
  1796   00241A  E109               	bnz	u590
  1797   00241C  0E64               	movlw	100
  1798   00241E  5C09               	subwf	display@dValue^0,w,c
  1799   002420  A0D8               	btfss	status,0,c
  1800   002422  EF15  F012         	goto	u591
  1801   002426  EF17  F012         	goto	u590
  1802   00242A                     u591:
  1803   00242A  EF19  F012         	goto	l1267
  1804   00242E                     u590:
  1805   00242E  EF77  F012         	goto	l92
  1806   002432                     l1267:
  1807                           
  1808                           ;lab7.c: 219:     if(dValue < 0) {
  1809   002432  BE0A               	btfsc	(display@dValue+1)^0,7,c
  1810   002434  EF20  F012         	goto	u600
  1811   002438  EF1E  F012         	goto	u601
  1812   00243C                     u601:
  1813   00243C  EF2E  F012         	goto	l1273
  1814   002440                     u600:
  1815   002440                     
  1816                           ;lab7.c: 220:         PORTDbits.RD7 = 1;
  1817   002440  8ECD               	bsf	205,7,c	;volatile
  1818   002442                     
  1819                           ;lab7.c: 221:         dValue *= -1;
  1820   002442  C009  F001         	movff	display@dValue,___wmul@multiplier
  1821   002446  C00A  F002         	movff	display@dValue+1,___wmul@multiplier+1
  1822   00244A  0EFF               	movlw	255
  1823   00244C  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1824   00244E  6803               	setf	___wmul@multiplicand^0,c
  1825   002450  EC8B  F013         	call	___wmul	;wreg free
  1826   002454  C001  F009         	movff	?___wmul,display@dValue
  1827   002458  C002  F00A         	movff	?___wmul+1,display@dValue+1
  1828   00245C                     l1273:
  1829                           
  1830                           ;lab7.c: 225:     int digit1, digit2;;lab7.c: 226:     digit1 = dValue / 10;
  1831   00245C  C009  F001         	movff	display@dValue,___awdiv@dividend
  1832   002460  C00A  F002         	movff	display@dValue+1,___awdiv@dividend+1
  1833   002464  0E00               	movlw	0
  1834   002466  6E04               	movwf	(___awdiv@divisor+1)^0,c
  1835   002468  0E0A               	movlw	10
  1836   00246A  6E03               	movwf	___awdiv@divisor^0,c
  1837   00246C  EC78  F012         	call	___awdiv	;wreg free
  1838   002470  C001  F00D         	movff	?___awdiv,display@digit1
  1839   002474  C002  F00E         	movff	?___awdiv+1,display@digit1+1
  1840   002478                     
  1841                           ;lab7.c: 227:     digit2 = dValue % 10;
  1842   002478  C009  F001         	movff	display@dValue,___awmod@dividend
  1843   00247C  C00A  F002         	movff	display@dValue+1,___awmod@dividend+1
  1844   002480  0E00               	movlw	0
  1845   002482  6E04               	movwf	(___awmod@divisor+1)^0,c
  1846   002484  0E0A               	movlw	10
  1847   002486  6E03               	movwf	___awmod@divisor^0,c
  1848   002488  EC34  F013         	call	___awmod	;wreg free
  1849   00248C  C001  F00B         	movff	?___awmod,display@digit2
  1850   002490  C002  F00C         	movff	?___awmod+1,display@digit2+1
  1851   002494                     
  1852                           ;lab7.c: 229:     if (digit1 != 0) {
  1853   002494  500D               	movf	display@digit1^0,w,c
  1854   002496  100E               	iorwf	(display@digit1+1)^0,w,c
  1855   002498  B4D8               	btfsc	status,2,c
  1856   00249A  EF51  F012         	goto	u611
  1857   00249E  EF53  F012         	goto	u610
  1858   0024A2                     u611:
  1859   0024A2  EF71  F012         	goto	l1287
  1860   0024A6                     u610:
  1861   0024A6                     
  1862                           ;lab7.c: 230:         LATC = sevSeg[digit1];
  1863   0024A6  500D               	movf	display@digit1^0,w,c
  1864   0024A8  0F1A               	addlw	low _sevSeg
  1865   0024AA  6ED9               	movwf	fsr2l,c
  1866   0024AC  6ADA               	clrf	fsr2h,c
  1867   0024AE  50DF               	movf	indf2,w,c
  1868   0024B0  6EBC               	movwf	188,c	;volatile
  1869                           
  1870                           ;lab7.c: 231:         if ((sevSeg[digit1] & 0b1) == 1) {
  1871   0024B2  500D               	movf	display@digit1^0,w,c
  1872   0024B4  0F1A               	addlw	low _sevSeg
  1873   0024B6  6ED9               	movwf	fsr2l,c
  1874   0024B8  6ADA               	clrf	fsr2h,c
  1875   0024BA  A0DF               	btfss	indf2,0,c
  1876   0024BC  EF62  F012         	goto	u621
  1877   0024C0  EF64  F012         	goto	u620
  1878   0024C4                     u621:
  1879   0024C4  EF65  F012         	goto	l1283
  1880   0024C8                     u620:
  1881   0024C8                     
  1882                           ;lab7.c: 232:             PORTAbits.RA0 = 1;
  1883   0024C8  80CA               	bsf	202,0,c	;volatile
  1884   0024CA                     l1283:
  1885                           
  1886                           ;lab7.c: 234:         if ((sevSeg[digit1] & 0b10) == 2) {
  1887   0024CA  500D               	movf	display@digit1^0,w,c
  1888   0024CC  0F1A               	addlw	low _sevSeg
  1889   0024CE  6ED9               	movwf	fsr2l,c
  1890   0024D0  6ADA               	clrf	fsr2h,c
  1891   0024D2  A2DF               	btfss	indf2,1,c
  1892   0024D4  EF6E  F012         	goto	u631
  1893   0024D8  EF70  F012         	goto	u630
  1894   0024DC                     u631:
  1895   0024DC  EF71  F012         	goto	l1287
  1896   0024E0                     u630:
  1897   0024E0                     
  1898                           ;lab7.c: 235:             PORTAbits.RA1 = 1;
  1899   0024E0  82CA               	bsf	202,1,c	;volatile
  1900   0024E2                     l1287:
  1901                           
  1902                           ;lab7.c: 238:     LATD += sevSeg[digit2];
  1903   0024E2  500B               	movf	display@digit2^0,w,c
  1904   0024E4  0F1A               	addlw	low _sevSeg
  1905   0024E6  6ED9               	movwf	fsr2l,c
  1906   0024E8  6ADA               	clrf	fsr2h,c
  1907   0024EA  50DF               	movf	indf2,w,c
  1908   0024EC  26BD               	addwf	189,f,c	;volatile
  1909   0024EE                     l92:
  1910   0024EE  0012               	return		;funcret
  1911   0024F0                     __end_of_display:
  1912                           	callstack 0
  1913                           
  1914 ;; *************** function ___wmul *****************
  1915 ;; Defined at:
  1916 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\Umul16.c"
  1917 ;; Parameters:    Size  Location     Type
  1918 ;;  multiplier      2    0[COMRAM] unsigned int 
  1919 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1920 ;; Auto vars:     Size  Location     Type
  1921 ;;  product         2    4[COMRAM] unsigned int 
  1922 ;; Return value:  Size  Location     Type
  1923 ;;                  2    0[COMRAM] unsigned int 
  1924 ;; Registers used:
  1925 ;;		wreg, status,2, status,0, prodl, prodh
  1926 ;; Tracked objects:
  1927 ;;		On entry : 0/0
  1928 ;;		On exit  : 0/0
  1929 ;;		Unchanged: 0/0
  1930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  1931 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1932 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1934 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1935 ;;Total ram usage:        6 bytes
  1936 ;; Hardware stack levels used: 1
  1937 ;; This function calls:
  1938 ;;		Nothing
  1939 ;; This function is called by:
  1940 ;;		_main
  1941 ;;		_display
  1942 ;; This function uses a non-reentrant model
  1943 ;;
  1944                           
  1945                           	psect	text3
  1946   002716                     __ptext3:
  1947                           	callstack 0
  1948   002716                     ___wmul:
  1949                           	callstack 29
  1950   002716  5001               	movf	___wmul@multiplier^0,w,c
  1951   002718  0203               	mulwf	___wmul@multiplicand^0,c
  1952   00271A  006F FFCC  F005    	movff	prodl,___wmul@product
  1953   002720  006F FFD0  F006    	movff	prodh,___wmul@product+1
  1954   002726  5001               	movf	___wmul@multiplier^0,w,c
  1955   002728  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  1956   00272A  50F3               	movf	243,w,c
  1957   00272C  2606               	addwf	(___wmul@product+1)^0,f,c
  1958   00272E  5002               	movf	(___wmul@multiplier+1)^0,w,c
  1959   002730  0203               	mulwf	___wmul@multiplicand^0,c
  1960   002732  50F3               	movf	243,w,c
  1961   002734  2606               	addwf	(___wmul@product+1)^0,f,c
  1962   002736  C005  F001         	movff	___wmul@product,?___wmul
  1963   00273A  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1964   00273E  0012               	return		;funcret
  1965   002740                     __end_of___wmul:
  1966                           	callstack 0
  1967                           
  1968 ;; *************** function ___awmod *****************
  1969 ;; Defined at:
  1970 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\awmod.c"
  1971 ;; Parameters:    Size  Location     Type
  1972 ;;  dividend        2    0[COMRAM] int 
  1973 ;;  divisor         2    2[COMRAM] int 
  1974 ;; Auto vars:     Size  Location     Type
  1975 ;;  sign            1    5[COMRAM] unsigned char 
  1976 ;;  counter         1    4[COMRAM] unsigned char 
  1977 ;; Return value:  Size  Location     Type
  1978 ;;                  2    0[COMRAM] int 
  1979 ;; Registers used:
  1980 ;;		wreg, status,2, status,0
  1981 ;; Tracked objects:
  1982 ;;		On entry : 0/0
  1983 ;;		On exit  : 0/0
  1984 ;;		Unchanged: 0/0
  1985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  1986 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1987 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1989 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1990 ;;Total ram usage:        6 bytes
  1991 ;; Hardware stack levels used: 1
  1992 ;; This function calls:
  1993 ;;		Nothing
  1994 ;; This function is called by:
  1995 ;;		_display
  1996 ;; This function uses a non-reentrant model
  1997 ;;
  1998                           
  1999                           	psect	text4
  2000   002668                     __ptext4:
  2001                           	callstack 0
  2002   002668                     ___awmod:
  2003                           	callstack 29
  2004   002668  6A06               	clrf	___awmod@sign^0,c
  2005   00266A  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  2006   00266C  EF3C  F013         	goto	u530
  2007   002670  EF3A  F013         	goto	u531
  2008   002674                     u531:
  2009   002674  EF42  F013         	goto	l1233
  2010   002678                     u530:
  2011   002678  6C01               	negf	___awmod@dividend^0,c
  2012   00267A  1E02               	comf	(___awmod@dividend+1)^0,f,c
  2013   00267C  B0D8               	btfsc	status,0,c
  2014   00267E  2A02               	incf	(___awmod@dividend+1)^0,f,c
  2015   002680  0E01               	movlw	1
  2016   002682  6E06               	movwf	___awmod@sign^0,c
  2017   002684                     l1233:
  2018   002684  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  2019   002686  EF49  F013         	goto	u540
  2020   00268A  EF47  F013         	goto	u541
  2021   00268E                     u541:
  2022   00268E  EF4D  F013         	goto	l1237
  2023   002692                     u540:
  2024   002692  6C03               	negf	___awmod@divisor^0,c
  2025   002694  1E04               	comf	(___awmod@divisor+1)^0,f,c
  2026   002696  B0D8               	btfsc	status,0,c
  2027   002698  2A04               	incf	(___awmod@divisor+1)^0,f,c
  2028   00269A                     l1237:
  2029   00269A  5003               	movf	___awmod@divisor^0,w,c
  2030   00269C  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  2031   00269E  B4D8               	btfsc	status,2,c
  2032   0026A0  EF54  F013         	goto	u551
  2033   0026A4  EF56  F013         	goto	u550
  2034   0026A8                     u551:
  2035   0026A8  EF7A  F013         	goto	l1253
  2036   0026AC                     u550:
  2037   0026AC  0E01               	movlw	1
  2038   0026AE  6E05               	movwf	___awmod@counter^0,c
  2039   0026B0  EF5E  F013         	goto	l1243
  2040   0026B4                     l1241:
  2041   0026B4  90D8               	bcf	status,0,c
  2042   0026B6  3603               	rlcf	___awmod@divisor^0,f,c
  2043   0026B8  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  2044   0026BA  2A05               	incf	___awmod@counter^0,f,c
  2045   0026BC                     l1243:
  2046   0026BC  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  2047   0026BE  EF63  F013         	goto	u561
  2048   0026C2  EF65  F013         	goto	u560
  2049   0026C6                     u561:
  2050   0026C6  EF5A  F013         	goto	l1241
  2051   0026CA                     u560:
  2052   0026CA                     l1245:
  2053   0026CA  5003               	movf	___awmod@divisor^0,w,c
  2054   0026CC  5C01               	subwf	___awmod@dividend^0,w,c
  2055   0026CE  5004               	movf	(___awmod@divisor+1)^0,w,c
  2056   0026D0  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  2057   0026D2  A0D8               	btfss	status,0,c
  2058   0026D4  EF6E  F013         	goto	u571
  2059   0026D8  EF70  F013         	goto	u570
  2060   0026DC                     u571:
  2061   0026DC  EF74  F013         	goto	l1249
  2062   0026E0                     u570:
  2063   0026E0  5003               	movf	___awmod@divisor^0,w,c
  2064   0026E2  5E01               	subwf	___awmod@dividend^0,f,c
  2065   0026E4  5004               	movf	(___awmod@divisor+1)^0,w,c
  2066   0026E6  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  2067   0026E8                     l1249:
  2068   0026E8  90D8               	bcf	status,0,c
  2069   0026EA  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  2070   0026EC  3203               	rrcf	___awmod@divisor^0,f,c
  2071   0026EE  2E05               	decfsz	___awmod@counter^0,f,c
  2072   0026F0  EF65  F013         	goto	l1245
  2073   0026F4                     l1253:
  2074   0026F4  5006               	movf	___awmod@sign^0,w,c
  2075   0026F6  B4D8               	btfsc	status,2,c
  2076   0026F8  EF80  F013         	goto	u581
  2077   0026FC  EF82  F013         	goto	u580
  2078   002700                     u581:
  2079   002700  EF86  F013         	goto	l1257
  2080   002704                     u580:
  2081   002704  6C01               	negf	___awmod@dividend^0,c
  2082   002706  1E02               	comf	(___awmod@dividend+1)^0,f,c
  2083   002708  B0D8               	btfsc	status,0,c
  2084   00270A  2A02               	incf	(___awmod@dividend+1)^0,f,c
  2085   00270C                     l1257:
  2086   00270C  C001  F001         	movff	___awmod@dividend,?___awmod
  2087   002710  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  2088   002714  0012               	return		;funcret
  2089   002716                     __end_of___awmod:
  2090                           	callstack 0
  2091                           
  2092 ;; *************** function _calculate *****************
  2093 ;; Defined at:
  2094 ;;		line 303 in file "lab7.c"
  2095 ;; Parameters:    Size  Location     Type
  2096 ;;  val1            2    8[COMRAM] int 
  2097 ;;  val2            2   10[COMRAM] int 
  2098 ;;  op              1   12[COMRAM] enum E16765
  2099 ;; Auto vars:     Size  Location     Type
  2100 ;;		None
  2101 ;; Return value:  Size  Location     Type
  2102 ;;                  2    8[COMRAM] int 
  2103 ;; Registers used:
  2104 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2105 ;; Tracked objects:
  2106 ;;		On entry : 0/0
  2107 ;;		On exit  : 0/0
  2108 ;;		Unchanged: 0/0
  2109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  2110 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2111 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2112 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2113 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2114 ;;Total ram usage:        7 bytes
  2115 ;; Hardware stack levels used: 1
  2116 ;; Hardware stack levels required when called: 1
  2117 ;; This function calls:
  2118 ;;		___awdiv
  2119 ;; This function is called by:
  2120 ;;		_main
  2121 ;; This function uses a non-reentrant model
  2122 ;;
  2123                           
  2124                           	psect	text5
  2125   0025B2                     __ptext5:
  2126                           	callstack 0
  2127   0025B2                     _calculate:
  2128                           	callstack 29
  2129   0025B2                     
  2130                           ;lab7.c: 304:     switch (op) {
  2131   0025B2  EF16  F013         	goto	l1315
  2132   0025B6                     l1293:
  2133                           
  2134                           ;lab7.c: 306:             return val1 + val2;
  2135   0025B6  500B               	movf	calculate@val2^0,w,c
  2136   0025B8  2409               	addwf	calculate@val1^0,w,c
  2137   0025BA  6E09               	movwf	?_calculate^0,c
  2138   0025BC  500C               	movf	(calculate@val2+1)^0,w,c
  2139   0025BE  200A               	addwfc	(calculate@val1+1)^0,w,c
  2140   0025C0  6E0A               	movwf	(?_calculate+1)^0,c
  2141   0025C2  EF33  F013         	goto	l128
  2142   0025C6                     l1297:
  2143                           
  2144                           ;lab7.c: 308:             return val1 - val2;
  2145   0025C6  500B               	movf	calculate@val2^0,w,c
  2146   0025C8  5C09               	subwf	calculate@val1^0,w,c
  2147   0025CA  6E09               	movwf	?_calculate^0,c
  2148   0025CC  500C               	movf	(calculate@val2+1)^0,w,c
  2149   0025CE  580A               	subwfb	(calculate@val1+1)^0,w,c
  2150   0025D0  6E0A               	movwf	(?_calculate+1)^0,c
  2151   0025D2  EF33  F013         	goto	l128
  2152   0025D6                     l1301:
  2153                           
  2154                           ;lab7.c: 310:             return val1 * val2;
  2155   0025D6  500B               	movf	calculate@val2^0,w,c
  2156   0025D8  0209               	mulwf	calculate@val1^0,c
  2157   0025DA  006F FFCC  F00E    	movff	prodl,??_calculate
  2158   0025E0  006F FFD0  F00F    	movff	prodh,??_calculate+1
  2159   0025E6  020A               	mulwf	(calculate@val1+1)^0,c
  2160   0025E8  50F3               	movf	prodl,w,c
  2161   0025EA  260F               	addwf	(??_calculate+1)^0,f,c
  2162   0025EC  500C               	movf	(calculate@val2+1)^0,w,c
  2163   0025EE  0209               	mulwf	calculate@val1^0,c
  2164   0025F0  50F3               	movf	prodl,w,c
  2165   0025F2  260F               	addwf	(??_calculate+1)^0,f,c
  2166   0025F4  C00E  F009         	movff	??_calculate,?_calculate
  2167   0025F8  C00F  F00A         	movff	??_calculate+1,?_calculate+1
  2168   0025FC  EF33  F013         	goto	l128
  2169   002600                     l1305:
  2170                           
  2171                           ;lab7.c: 312:             return val1 / val2;
  2172   002600  C009  F001         	movff	calculate@val1,___awdiv@dividend
  2173   002604  C00A  F002         	movff	calculate@val1+1,___awdiv@dividend+1
  2174   002608  C00B  F003         	movff	calculate@val2,___awdiv@divisor
  2175   00260C  C00C  F004         	movff	calculate@val2+1,___awdiv@divisor+1
  2176   002610  EC78  F012         	call	___awdiv	;wreg free
  2177   002614  C001  F009         	movff	?___awdiv,?_calculate
  2178   002618  C002  F00A         	movff	?___awdiv+1,?_calculate+1
  2179   00261C  EF33  F013         	goto	l128
  2180   002620                     l1309:
  2181                           
  2182                           ;lab7.c: 314:             return 0;
  2183   002620  0E00               	movlw	0
  2184   002622  6E0A               	movwf	(?_calculate+1)^0,c
  2185   002624  0E00               	movlw	0
  2186   002626  6E09               	movwf	?_calculate^0,c
  2187   002628  EF33  F013         	goto	l128
  2188   00262C                     l1315:
  2189   00262C  500D               	movf	calculate@op^0,w,c
  2190   00262E  6E0E               	movwf	??_calculate^0,c
  2191   002630  6A0F               	clrf	(??_calculate+1)^0,c
  2192                           
  2193                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2194                           ; Switch size 1, requested type "simple"
  2195                           ; Number of cases is 1, Range of values is 0 to 0
  2196                           ; switch strategies available:
  2197                           ; Name         Instructions Cycles
  2198                           ; simple_byte            4     3 (average)
  2199                           ;	Chosen strategy is simple_byte
  2200   002632  500F               	movf	(??_calculate+1)^0,w,c
  2201   002634  0A00               	xorlw	0	; case 0
  2202   002636  B4D8               	btfsc	status,2,c
  2203   002638  EF20  F013         	goto	l1457
  2204   00263C  EF10  F013         	goto	l1309
  2205   002640                     l1457:
  2206                           
  2207                           ; Switch size 1, requested type "simple"
  2208                           ; Number of cases is 4, Range of values is 100 to 103
  2209                           ; switch strategies available:
  2210                           ; Name         Instructions Cycles
  2211                           ; simple_byte           13     7 (average)
  2212                           ;	Chosen strategy is simple_byte
  2213   002640  500E               	movf	??_calculate^0,w,c
  2214   002642  0A64               	xorlw	100	; case 100
  2215   002644  B4D8               	btfsc	status,2,c
  2216   002646  EFDB  F012         	goto	l1293
  2217   00264A  0A01               	xorlw	1	; case 101
  2218   00264C  B4D8               	btfsc	status,2,c
  2219   00264E  EFE3  F012         	goto	l1297
  2220   002652  0A03               	xorlw	3	; case 102
  2221   002654  B4D8               	btfsc	status,2,c
  2222   002656  EFEB  F012         	goto	l1301
  2223   00265A  0A01               	xorlw	1	; case 103
  2224   00265C  B4D8               	btfsc	status,2,c
  2225   00265E  EF00  F013         	goto	l1305
  2226   002662  EF10  F013         	goto	l1309
  2227   002666                     l128:
  2228   002666  0012               	return		;funcret
  2229   002668                     __end_of_calculate:
  2230                           	callstack 0
  2231                           
  2232 ;; *************** function ___awdiv *****************
  2233 ;; Defined at:
  2234 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\awdiv.c"
  2235 ;; Parameters:    Size  Location     Type
  2236 ;;  dividend        2    0[COMRAM] int 
  2237 ;;  divisor         2    2[COMRAM] int 
  2238 ;; Auto vars:     Size  Location     Type
  2239 ;;  quotient        2    6[COMRAM] int 
  2240 ;;  sign            1    5[COMRAM] unsigned char 
  2241 ;;  counter         1    4[COMRAM] unsigned char 
  2242 ;; Return value:  Size  Location     Type
  2243 ;;                  2    0[COMRAM] int 
  2244 ;; Registers used:
  2245 ;;		wreg, status,2, status,0
  2246 ;; Tracked objects:
  2247 ;;		On entry : 0/0
  2248 ;;		On exit  : 0/0
  2249 ;;		Unchanged: 0/0
  2250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  2251 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2252 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2254 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  2255 ;;Total ram usage:        8 bytes
  2256 ;; Hardware stack levels used: 1
  2257 ;; This function calls:
  2258 ;;		Nothing
  2259 ;; This function is called by:
  2260 ;;		_display
  2261 ;;		_calculate
  2262 ;; This function uses a non-reentrant model
  2263 ;;
  2264                           
  2265                           	psect	text6
  2266   0024F0                     __ptext6:
  2267                           	callstack 0
  2268   0024F0                     ___awdiv:
  2269                           	callstack 29
  2270   0024F0  6A06               	clrf	___awdiv@sign^0,c
  2271   0024F2  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  2272   0024F4  EF80  F012         	goto	u470
  2273   0024F8  EF7E  F012         	goto	u471
  2274   0024FC                     u471:
  2275   0024FC  EF86  F012         	goto	l1189
  2276   002500                     u470:
  2277   002500  6C03               	negf	___awdiv@divisor^0,c
  2278   002502  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  2279   002504  B0D8               	btfsc	status,0,c
  2280   002506  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  2281   002508  0E01               	movlw	1
  2282   00250A  6E06               	movwf	___awdiv@sign^0,c
  2283   00250C                     l1189:
  2284   00250C  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  2285   00250E  EF8D  F012         	goto	u480
  2286   002512  EF8B  F012         	goto	u481
  2287   002516                     u481:
  2288   002516  EF93  F012         	goto	l1195
  2289   00251A                     u480:
  2290   00251A  6C01               	negf	___awdiv@dividend^0,c
  2291   00251C  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  2292   00251E  B0D8               	btfsc	status,0,c
  2293   002520  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  2294   002522  0E01               	movlw	1
  2295   002524  1A06               	xorwf	___awdiv@sign^0,f,c
  2296   002526                     l1195:
  2297   002526  0E00               	movlw	0
  2298   002528  6E08               	movwf	(___awdiv@quotient+1)^0,c
  2299   00252A  0E00               	movlw	0
  2300   00252C  6E07               	movwf	___awdiv@quotient^0,c
  2301   00252E  5003               	movf	___awdiv@divisor^0,w,c
  2302   002530  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  2303   002532  B4D8               	btfsc	status,2,c
  2304   002534  EF9E  F012         	goto	u491
  2305   002538  EFA0  F012         	goto	u490
  2306   00253C                     u491:
  2307   00253C  EFC8  F012         	goto	l1217
  2308   002540                     u490:
  2309   002540  0E01               	movlw	1
  2310   002542  6E05               	movwf	___awdiv@counter^0,c
  2311   002544  EFA8  F012         	goto	l1203
  2312   002548                     l1201:
  2313   002548  90D8               	bcf	status,0,c
  2314   00254A  3603               	rlcf	___awdiv@divisor^0,f,c
  2315   00254C  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  2316   00254E  2A05               	incf	___awdiv@counter^0,f,c
  2317   002550                     l1203:
  2318   002550  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  2319   002552  EFAD  F012         	goto	u501
  2320   002556  EFAF  F012         	goto	u500
  2321   00255A                     u501:
  2322   00255A  EFA4  F012         	goto	l1201
  2323   00255E                     u500:
  2324   00255E                     l1205:
  2325   00255E  90D8               	bcf	status,0,c
  2326   002560  3607               	rlcf	___awdiv@quotient^0,f,c
  2327   002562  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  2328   002564  5003               	movf	___awdiv@divisor^0,w,c
  2329   002566  5C01               	subwf	___awdiv@dividend^0,w,c
  2330   002568  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2331   00256A  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  2332   00256C  A0D8               	btfss	status,0,c
  2333   00256E  EFBB  F012         	goto	u511
  2334   002572  EFBD  F012         	goto	u510
  2335   002576                     u511:
  2336   002576  EFC2  F012         	goto	l1213
  2337   00257A                     u510:
  2338   00257A  5003               	movf	___awdiv@divisor^0,w,c
  2339   00257C  5E01               	subwf	___awdiv@dividend^0,f,c
  2340   00257E  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2341   002580  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  2342   002582  8007               	bsf	___awdiv@quotient^0,0,c
  2343   002584                     l1213:
  2344   002584  90D8               	bcf	status,0,c
  2345   002586  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  2346   002588  3203               	rrcf	___awdiv@divisor^0,f,c
  2347   00258A  2E05               	decfsz	___awdiv@counter^0,f,c
  2348   00258C  EFAF  F012         	goto	l1205
  2349   002590                     l1217:
  2350   002590  5006               	movf	___awdiv@sign^0,w,c
  2351   002592  B4D8               	btfsc	status,2,c
  2352   002594  EFCE  F012         	goto	u521
  2353   002598  EFD0  F012         	goto	u520
  2354   00259C                     u521:
  2355   00259C  EFD4  F012         	goto	l1221
  2356   0025A0                     u520:
  2357   0025A0  6C07               	negf	___awdiv@quotient^0,c
  2358   0025A2  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  2359   0025A4  B0D8               	btfsc	status,0,c
  2360   0025A6  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  2361   0025A8                     l1221:
  2362   0025A8  C007  F001         	movff	___awdiv@quotient,?___awdiv
  2363   0025AC  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  2364   0025B0  0012               	return		;funcret
  2365   0025B2                     __end_of___awdiv:
  2366                           	callstack 0
  2367                           
  2368                           	psect	smallconst
  2369   002000                     __psmallconst:
  2370                           	callstack 0
  2371   002000  00                 	db	0
  2372   002001  00                 	db	0	; dummy byte at the end
  2373   002000                     __smallconst    set	__psmallconst
  2374   002000                     __mediumconst   set	__psmallconst
  2375   000003                     __activetblptr  equ	3
  2376                           
  2377                           	psect	rparam
  2378   000001                     ___rparam_used  equ	1
  2379   000000                     ___param_bank   equ	0
  2380   000000                     __Lparam        equ	__Lrparam
  2381   000000                     __Hparam        equ	__Hrparam
  2382                           
  2383                           	psect	config
  2384                           
  2385                           ;Config register CONFIG1L @ 0x300000
  2386                           ;	External Oscillator Selection
  2387                           ;	FEXTOSC = LP, LP (crystal oscillator) optimized for 32.768 kHz; PFM set to low power
  2388                           ;	Reset Oscillator Selection
  2389                           ;	RSTOSC = EXTOSC, EXTOSC operating per FEXTOSC bits (device manufacturing default)
  2390   300000                     	org	3145728
  2391   300000  F8                 	db	248
  2392                           
  2393                           ;Config register CONFIG1H @ 0x300001
  2394                           ;	Clock out Enable bit
  2395                           ;	CLKOUTEN = OFF, CLKOUT function is disabled
  2396                           ;	PRLOCKED One-Way Set Enable bit
  2397                           ;	PR1WAY = ON, PRLOCK bit can be cleared and set only once
  2398                           ;	Clock Switch Enable bit
  2399                           ;	CSWEN = ON, Writing to NOSC and NDIV is allowed
  2400                           ;	Fail-Safe Clock Monitor Enable bit
  2401                           ;	FCMEN = ON, Fail-Safe Clock Monitor enabled
  2402   300001                     	org	3145729
  2403   300001  FF                 	db	255
  2404                           
  2405                           ;Config register CONFIG2L @ 0x300002
  2406                           ;	MCLR Enable bit
  2407                           ;	MCLRE = EXTMCLR, If LVP = 0, MCLR pin is MCLR; If LVP = 1, RE3 pin function is MCLR
  2408                           ;	Power-up timer selection bits
  2409                           ;	PWRTS = PWRT_OFF, PWRT is disabled
  2410                           ;	Multi-vector enable bit
  2411                           ;	MVECEN = ON, Multi-vector enabled, Vector table used for interrupts
  2412                           ;	IVTLOCK bit One-way set enable bit
  2413                           ;	IVT1WAY = ON, IVTLOCK bit can be cleared and set only once
  2414                           ;	Low Power BOR Enable bit
  2415                           ;	LPBOREN = OFF, ULPBOR disabled
  2416                           ;	Brown-out Reset Enable bits
  2417                           ;	BOREN = SBORDIS, Brown-out Reset enabled , SBOREN bit is ignored
  2418   300002                     	org	3145730
  2419   300002  FF                 	db	255
  2420                           
  2421                           ;Config register CONFIG2H @ 0x300003
  2422                           ;	Brown-out Reset Voltage Selection bits
  2423                           ;	BORV = VBOR_2P45, Brown-out Reset Voltage (VBOR) set to 2.45V
  2424                           ;	ZCD Disable bit
  2425                           ;	ZCD = OFF, ZCD disabled. ZCD can be enabled by setting the ZCDSEN bit of ZCDCON
  2426                           ;	PPSLOCK bit One-Way Set Enable bit
  2427                           ;	PPS1WAY = ON, PPSLOCK bit can be cleared and set only once; PPS registers remain locke
      +                          d after one clear/set cycle
  2428                           ;	Stack Full/Underflow Reset Enable bit
  2429                           ;	STVREN = ON, Stack full/underflow will cause Reset
  2430                           ;	Debugger Enable bit
  2431                           ;	DEBUG = OFF, Background debugger disabled
  2432                           ;	Extended Instruction Set Enable bit
  2433                           ;	XINST = OFF, Extended Instruction Set and Indexed Addressing Mode disabled
  2434   300003                     	org	3145731
  2435   300003  FF                 	db	255
  2436                           
  2437                           ;Config register CONFIG3L @ 0x300004
  2438                           ;	WDT Period selection bits
  2439                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  2440                           ;	WDT operating mode
  2441                           ;	WDTE = OFF, WDT Disabled; SWDTEN is ignored
  2442   300004                     	org	3145732
  2443   300004  9F                 	db	159
  2444                           
  2445                           ;Config register CONFIG3H @ 0x300005
  2446                           ;	WDT Window Select bits
  2447                           ;	WDTCWS = WDTCWS_7, window always open (100%); software control; keyed access not requi
      +                          red
  2448                           ;	WDT input clock selector
  2449                           ;	WDTCCS = SC, Software Control
  2450   300005                     	org	3145733
  2451   300005  FF                 	db	255
  2452                           
  2453                           ;Config register CONFIG4L @ 0x300006
  2454                           ;	Boot Block Size selection bits
  2455                           ;	BBSIZE = BBSIZE_512, Boot Block size is 512 words
  2456                           ;	Boot Block enable bit
  2457                           ;	BBEN = OFF, Boot block disabled
  2458                           ;	Storage Area Flash enable bit
  2459                           ;	SAFEN = OFF, SAF disabled
  2460                           ;	Application Block write protection bit
  2461                           ;	WRTAPP = OFF, Application Block not write protected
  2462   300006                     	org	3145734
  2463   300006  FF                 	db	255
  2464                           
  2465                           ;Config register CONFIG4H @ 0x300007
  2466                           ;	Boot Block Write Protection bit
  2467                           ;	WRTB = OFF, Boot Block not write-protected
  2468                           ;	Configuration Register Write Protection bit
  2469                           ;	WRTC = OFF, Configuration registers not write-protected
  2470                           ;	Data EEPROM Write Protection bit
  2471                           ;	WRTD = OFF, Data EEPROM not write-protected
  2472                           ;	SAF Write protection bit
  2473                           ;	WRTSAF = OFF, SAF not Write Protected
  2474                           ;	Low Voltage Programming Enable bit
  2475                           ;	LVP = ON, Low voltage programming enabled. MCLR/VPP pin function is MCLR. MCLRE config
      +                          uration bit is ignored
  2476   300007                     	org	3145735
  2477   300007  FF                 	db	255
  2478                           
  2479                           ;Config register CONFIG5L @ 0x300008
  2480                           ;	PFM and Data EEPROM Code Protection bit
  2481                           ;	CP = OFF, PFM and Data EEPROM code protection disabled
  2482   300008                     	org	3145736
  2483   300008  FF                 	db	255
  2484                           
  2485                           ;Config register CONFIG5H @ 0x300009
  2486                           ;	unspecified, using default values
  2487   300009                     	org	3145737
  2488   300009  FF                 	db	255
  2489                           tosu	equ	0x3FFF
  2490                           tosh	equ	0x3FFE
  2491                           tosl	equ	0x3FFD
  2492                           stkptr	equ	0x3FFC
  2493                           pclatu	equ	0x3FFB
  2494                           pclath	equ	0x3FFA
  2495                           pcl	equ	0x3FF9
  2496                           tblptru	equ	0x3FF8
  2497                           tblptrh	equ	0x3FF7
  2498                           tblptrl	equ	0x3FF6
  2499                           tablat	equ	0x3FF5
  2500                           prodh	equ	0x3FF4
  2501                           prodl	equ	0x3FF3
  2502                           indf0	equ	0x3FEF
  2503                           postinc0	equ	0x3FEE
  2504                           postdec0	equ	0x3FED
  2505                           preinc0	equ	0x3FEC
  2506                           plusw0	equ	0x3FEB
  2507                           fsr0h	equ	0x3FEA
  2508                           fsr0l	equ	0x3FE9
  2509                           wreg	equ	0x3FE8
  2510                           indf1	equ	0x3FE7
  2511                           postinc1	equ	0x3FE6
  2512                           postdec1	equ	0x3FE5
  2513                           preinc1	equ	0x3FE4
  2514                           plusw1	equ	0x3FE3
  2515                           fsr1h	equ	0x3FE2
  2516                           fsr1l	equ	0x3FE1
  2517                           bsr	equ	0x3FE0
  2518                           indf2	equ	0x3FDF
  2519                           postinc2	equ	0x3FDE
  2520                           postdec2	equ	0x3FDD
  2521                           preinc2	equ	0x3FDC
  2522                           plusw2	equ	0x3FDB
  2523                           fsr2h	equ	0x3FDA
  2524                           fsr2l	equ	0x3FD9
  2525                           status	equ	0x3FD8

Data Sizes:
    Strings     0
    Constant    0
    Data        10
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     25      35
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          256      0       0
    BANK16          256      0       0
    BANK17          256      0       0
    BANK18          256      0       0
    BANK19          256      0       0
    BANK20          256      0       0
    BANK21          256      0       0
    BANK22          256      0       0
    BANK23          256      0       0
    BANK24          256      0       0
    BANK25          256      0       0
    BANK26          256      0       0
    BANK27          256      0       0
    BANK28          256      0       0
    BANK29          256      0       0
    BANK30          256      0       0
    BANK31          256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_calculate
    _display->___awdiv
    _calculate->___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _main in BANK19

    None.

Critical Paths under _main in BANK20

    None.

Critical Paths under _main in BANK21

    None.

Critical Paths under _main in BANK22

    None.

Critical Paths under _main in BANK23

    None.

Critical Paths under _main in BANK24

    None.

Critical Paths under _main in BANK25

    None.

Critical Paths under _main in BANK26

    None.

Critical Paths under _main in BANK27

    None.

Critical Paths under _main in BANK28

    None.

Critical Paths under _main in BANK29

    None.

Critical Paths under _main in BANK30

    None.

Critical Paths under _main in BANK31

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0    2350
                                             15 COMRAM    10    10      0
                             ___wmul
                          _calculate
                            _display
                         _scanKeypad
 ---------------------------------------------------------------------------------
 (1) _scanKeypad                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _display                                              6     4      2     998
                                              8 COMRAM     6     4      2
                            ___awdiv
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     165
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _calculate                                            7     2      5     505
                                              8 COMRAM     7     2      5
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     304
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___wmul
   _calculate
     ___awdiv
   _display
     ___awdiv
     ___awmod
     ___wmul
   _scanKeypad

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM            8191      0       0      0.0%
BITBIGSFRllh      1337      0       0      0.0%
BITBIGSFRlll       576      0       0      0.0%
BITBANK31          256      0       0      0.0%
BANK31             256      0       0      0.0%
BITBANK30          256      0       0      0.0%
BANK30             256      0       0      0.0%
BITBANK29          256      0       0      0.0%
BANK29             256      0       0      0.0%
BITBANK28          256      0       0      0.0%
BANK28             256      0       0      0.0%
BITBANK27          256      0       0      0.0%
BANK27             256      0       0      0.0%
BITBANK26          256      0       0      0.0%
BANK26             256      0       0      0.0%
BITBANK25          256      0       0      0.0%
BANK25             256      0       0      0.0%
BITBANK24          256      0       0      0.0%
BANK24             256      0       0      0.0%
BITBANK23          256      0       0      0.0%
BANK23             256      0       0      0.0%
BITBANK22          256      0       0      0.0%
BANK22             256      0       0      0.0%
BITBANK21          256      0       0      0.0%
BANK21             256      0       0      0.0%
BITBANK20          256      0       0      0.0%
BANK20             256      0       0      0.0%
BITBANK19          256      0       0      0.0%
BANK19             256      0       0      0.0%
BITBANK18          256      0       0      0.0%
BANK18             256      0       0      0.0%
BITBANK17          256      0       0      0.0%
BANK17             256      0       0      0.0%
BITBANK16          256      0       0      0.0%
BANK16             256      0       0      0.0%
BITBANK15          256      0       0      0.0%
BANK15             256      0       0      0.0%
BITBANK14          256      0       0      0.0%
BANK14             256      0       0      0.0%
BITBANK13          256      0       0      0.0%
BANK13             256      0       0      0.0%
BITBANK12          256      0       0      0.0%
BANK12             256      0       0      0.0%
BITBANK11          256      0       0      0.0%
BANK11             256      0       0      0.0%
BITBANK10          256      0       0      0.0%
BANK10             256      0       0      0.0%
BITBANK9           256      0       0      0.0%
BANK9              256      0       0      0.0%
BITBANK8           256      0       0      0.0%
BANK8              256      0       0      0.0%
BITBANK7           256      0       0      0.0%
BANK7              256      0       0      0.0%
BITBANK6           256      0       0      0.0%
BANK6              256      0       0      0.0%
BITBANK5           256      0       0      0.0%
BANK5              256      0       0      0.0%
BITBANK4           256      0       0      0.0%
BANK4              256      0       0      0.0%
BITBANK3           256      0       0      0.0%
BANK3              256      0       0      0.0%
BITBANK2           256      0       0      0.0%
BANK2              256      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0       0      0.0%
BITBANK0           160      0       0      0.0%
BANK0              160      0       0      0.0%
BITCOMRAM           95      0       0      0.0%
COMRAM              95     25      35     36.8%
BITBIGSFRlh         80      0       0      0.0%
BITBIGSFRh          52      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0      35      0.0%


Microchip Technology PIC18 Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Tue Apr 08 12:25:35 2025

                     l70 2164                       l57 206C                       l66 2160  
                     l58 206C                       l92 24EE                       l99 22E2  
           ___awdiv@sign 0006      ___wmul@multiplicand 0003                      l100 240A  
                    l101 22F6                      l110 2376                      l102 230A  
                    l111 23B2                      l103 2322                      l112 238A  
                    l104 235E                      l121 23F2                      l105 2336  
                    l114 239E                      l107 234A                      l117 23CA  
                    l118 2406                      l119 23DE                      l128 2666  
                    l136 273E                      l380 2714                      l367 25B0  
                    l901 22F0                      l921 2344                      l905 2304  
                    l931 2370                      l915 2330                      l909 231C  
                    l943 2398                      l927 2358                      l953 23C4  
                    l937 2384                      l971 2400                      l965 23EC  
                    l949 23AC                      l975 2408                      l959 23D8  
                    l895 22C4                      l897 22DC                      u200 2370  
                    u201 236C                      u210 2384                      u130 22DC  
                    u211 2380                      u131 22D8                      u220 2398  
                    u140 22F0                      u221 2394                      u141 22EC  
                    u230 23AC                      u150 2304                      u231 23A8  
                    u151 2300                      u240 23C4                      u160 231C  
                    u241 23C0                      u161 2318                      u250 23D8  
                    u170 2330                      u251 23D4                      u171 232C  
                    u500 255E                      u260 23EC                      u180 2344  
                    u501 255A                      u261 23E8                      u181 2340  
                    u510 257A                      u270 2400                      u190 2358  
                    u511 2576                      u271 23FC                      u191 2354  
                    u520 25A0                      u600 2440                      u521 259C  
                    u601 243C                      u530 2678                      u610 24A6  
                    u531 2674                      u611 24A2                      u540 2692  
                    u620 24C8                      u700 214C                      u541 268E  
                    u621 24C4                      u701 2148                      u470 2500  
                    u550 26AC                      u630 24E0                      u710 215C  
                    u471 24FC                      u551 26A8                      u631 24DC  
                    u711 2158                      u480 251A                      u560 26CA  
                    u720 21A2                      u640 2050                      u481 2516  
                    u561 26C6                      u721 219E                      u641 204C  
                    u490 2540                      u570 26E0                      u730 21EA  
                    u650 2060                      u491 253C                      u571 26DC  
                    u731 21E6                      u651 205C                      u580 2704  
                    u740 21FC                      u660 2080                      u581 2700  
                    u741 21F8                      u661 207C                      u590 242E  
                    u750 220C                      u670 20C8                      u591 242A  
                    u751 2208                      u807 217A                      u671 20C4  
                    u760 2258                      u680 20DA                      u761 2254  
                    u817 21C0                      u681 20D6                      u770 22B0  
                    u690 20EA                      u771 22AC                      u827 226E  
                    u691 20E6                      u787 209E                      u797 2124  
           ___awmod@sign 0006                      wreg 3FE8                     l1201 2548  
                   l1211 2582                     l1203 2550                     l1221 25A8  
                   l1213 2584                     l1205 255E                     l1301 25D6  
                   l1215 258A                     l1207 2564                     l1231 2680  
                   l1209 257A                     l1217 2590                     l1305 2600  
                   l1241 26B4                     l1233 2684                     l1225 2668  
                   l1401 21A2                     l1321 2002                     l1219 25A0  
                   l1315 262C                     l1251 26EE                     l1243 26BC  
                   l1235 2692                     l1227 266A                     l1411 21DA  
                   l1403 21AA                     l1331 2010                     l1323 2004  
                   l1181 24F0                     l1309 2620                     l1245 26CA  
                   l1253 26F4                     l1237 269A                     l1229 2678  
                   l1261 240C                     l1421 2230                     l1413 21EA  
                   l1405 21B6                     l1341 201C                     l1333 2012  
                   l1325 2008                     l1191 251A                     l1183 24F2  
                   l1255 2704                     l1247 26E0                     l1239 26AC  
                   l1175 2716                     l1271 2442                     l1263 2412  
                   l1431 227C                     l1423 2240                     l1415 21FC  
                   l1407 21CE                     l1351 203A                     l1343 201E  
                   l1335 2014                     l1327 200A                     l1193 2522  
                   l1185 2500                     l1257 270C                     l1249 26E8  
                   l1177 2736                     l1281 24C8                     l1273 245C  
                   l1433 229C                     l1425 2246                     l1417 220C  
                   l1409 21D4                     l1361 2080                     l1353 2040  
                   l1345 2020                     l1337 2016                     l1329 200C  
                   l1195 2526                     l1187 2508                     l1291 25B2  
                   l1283 24CA                     l1275 2478                     l1267 2432  
                   l1435 22B0                     l1419 2228                     l1427 2258  
                   l1371 20B8                     l1363 2088                     l1355 2050  
                   l1347 2022                     l1339 201A                     l1197 252E  
                   l1189 250C                     l1293 25B6                     l1285 24E0  
                   l1277 2494                     l1269 2440                     l1429 2264  
                   l1381 210E                     l1373 20C8                     l1365 2094  
                   l1357 2060                     l1349 2024                     l1199 2540  
                   l1279 24A6                     l1287 24E2                     l1391 214C  
                   l1383 211A                     l1375 20DA                     l1367 20AC  
                   l1359 2070                     l1457 2640                     l1297 25C6  
                   l1393 2166                     l1385 2132                     l1377 20EA  
                   l1369 20B2                     l1395 2170                     l1387 2136  
                   l1379 2106                     l1397 218C                     l1389 213C  
                   l1399 2192                     _LATA 3FBA                     _LATC 3FBC  
                   _LATD 3FBD                     _main 2002                     fsr2h 3FDA  
                   indf2 3FDF                     fsr1l 3FE1                     fsr2l 3FD9  
                   prodh 3FF4                     prodl 3FF3                     start FFFC  
           ___param_bank 0000                    ?_main 0001          __end_of___awdiv 25B2  
        __end_of___awmod 2716          ___awdiv@divisor 0003                    _T1CON 3FB2  
        ___awdiv@counter 0005                    _TRISA 3FC2                    _TRISB 3FC3  
                  _TRISC 3FC4                    _TRISD 3FC5          __end_of_display 24F0  
           main@operator 0016                    tablat 3FF5                    status 3FD8  
        __initialization 2740             __end_of_main 22C4                   ??_main 0010  
          __activetblptr 0003                   _ADCON0 3EF8                   _ADCON1 3EF9  
                 _ADCON2 3EFA         ___awdiv@dividend 0001                   _ANSELA 3A40  
                 _ANSELB 3A50                   _ANSELC 3A60                   _ANSELD 3A70  
          calculate@val1 0009            calculate@val2 000B            display@dValue 0009  
          display@digit1 000D            display@digit2 000B                   ___wmul 2716  
              ??___awdiv 0005                ??___awmod 0005         ___awdiv@quotient 0007  
        ___awmod@divisor 0003                   _sevSeg 001A                   isa$std 0001  
        ___awmod@counter 0005                ??_display 000B             __pdataCOMRAM 001A  
           __mediumconst 2000                   tblptrh 3FF7                   tblptrl 3FF6  
                 tblptru 3FF8               __accesstop 0060  __end_of__initialization 2762  
          ___rparam_used 0001           __pcstackCOMRAM 0001                  ?___wmul 0001  
                _CCP2CON 3F7A        __end_of_calculate 2668                  __Hparam 0000  
                __Lparam 0000                  ___awdiv 24F0                  ___awmod 2668  
           __psmallconst 2000                  __pcinit 2740                  __ramtop 2000  
             _scanKeypad 22C4                  __ptext0 2002                  __ptext1 22C4  
                __ptext2 240C                  __ptext3 2716                  __ptext4 2668  
                __ptext5 25B2                  __ptext6 24F0                  _display 240C  
       ___awmod@dividend 0001     end_of_initialization 2762                  postdec1 3FE5  
                postinc0 3FEE                _PORTAbits 3FCA                _PORTBbits 3FCB  
              _PORTDbits 3FCD               main@value1 0014               main@value2 0017  
             main@result 0012           __end_of___wmul 2740            __pidataCOMRAM 2768  
            ?_scanKeypad 0001      start_initialization 2740                 ??___wmul 0005  
              _calculate 25B2                 ?___awdiv 0001                 ?___awmod 0001  
               ?_display 0009              __smallconst 2000           ___wmul@product 0005  
             ?_calculate 0009        ___wmul@multiplier 0001                copy_data0 2754  
            calculate@op 000D                 __Hrparam 0000                 __Lrparam 0000  
           ??_scanKeypad 0001              ??_calculate 000E       __end_of_scanKeypad 240C  
               isa$xinst 0000                 main@ret1 0019  
